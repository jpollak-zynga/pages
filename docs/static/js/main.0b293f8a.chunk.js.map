{"version":3,"sources":["tile.svg","GoalComponent.tsx","GoalListComponent.tsx","Goals.ts","TileSetComponent.tsx","AccordionCell.tsx","RulesComponent.tsx","isWord.tsx","TileDefinitions.tsx","WordFinder.ts","MenuItemComponent.tsx","MainMenuComponent.tsx","Globals.ts","App.tsx","InviteComponent.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","GoalComponent","_React$PureComponent","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","props","mode","renderVertical","renderHorizontal","react_default","a","createElement","Row_default","id","className","Col_default","md","Badge_default","variant","goal","type","description","pill","points","xs","React","PureComponent","GoalListComponent","_this$props","goals","move","pendingMove","canPlay","board","Card_default","Header","Body","map","index","possible","classNames","check","compact","join","GoalComponent_GoalComponent","_this$props2","Fragment","Goal","letters","t","letter","possibleWithBoard","word","checkWord","VerbGoal","_Goal","_getPrototypeOf2","_this","_len","length","args","Array","_key","call","concat","includes","endsWith","json","VerbPastGoal","_Goal2","_getPrototypeOf3","_this2","_len3","_key3","DoublesGoal","_Goal3","_this3","get","split","StartsWithGoal","_Goal4","_this4","startsWith","CheapskateGoal","filter","e","some","LengthGoal","TileDefinitionComponent","observer","remaining","tileDefinition","count","Component","TileSetComponent","_class2","_React$Component2","_this$props$tileSet","tileSet","name","tiles","undefined","bag","tile","TileSetComponent_TileDefinitionComponent","AccordionCell","onClick","onSelect","eventKey","Accordion_default","Toggle","as","Card","style","cursor","title","Collapse","children","SESSION_STORAGE_KEY","CURRENT_VERSION","RulesComponent","activeEventKey","setState","state","stateString","sessionStorage","getItem","JSON","parse","version","_unused","removeItem","setItem","stringify","options","changeOptions","resetOptions","defaultActiveKey","oneScoochPerTurn","Badge","bonusForLongerWords","src_TileSetComponent","Form_default","Check","label","checked","onChange","originalOptions","objectSpread","Button_default","href","target","rel","TRIE","require","find","forEach","toLocaleLowerCase","TileDefinition","TileDefinitions_class","initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","applyDecoratedDescriptor","prototype","observable","configurable","enumerable","writable","initializer","TileDefinitions","_class3","TileSet","_descriptor4","_descriptor5","WordFinder","width","onWordFound","y","x","seed","search","pos","result","push","adjacent","info","prefix","next","getOwnPropertyNames","validIndex","indexOf","valid","splice","getPrefixInfo","adjacentFree","nextPos","nextTile","toLowerCase","toConsumableArray","MenuItemComponent","icon","badge","disabled","onClickDisabled","react","Figure_default","Image","src","MainMenuComponent","show","hide","canReset","reset","canPass","passWillEndGame","pass","usedNuke","noMoreTiles","nuke","nukeTitle","Modal_default","onHide","backdrop","MenuItemComponent_MenuItemComponent","Error","phone","window","innerWidth","MoveTypes","InviteComponent","gameUrl","playerName","changePlayerName","play","dismiss","scrollable","closeButton","Title","lib_default","size","Caption","Group","Label","Control","placeholder","DEFAULT_PLAYER_NAME","event","Footer","MOVE_VARIANTS","DEFAULT_OPTIONS","UID","classes","playerScore","player","words","i","bonusPoints","reduce","b","getTileSet","tileSetName","TileSets","newGame","players","data","j","drop","menuState","loading","gameStateVersion","gameId","uuid","playerIndex","original","reordered","nukers","passers","over","announcements","JSON_TO_URL_DATA","APP_ID","App","_React$Component","automation","loadGameId","forcePushGameData","batonTimeout","tickInterval","pollInterval","automateInterval","pushImmediate","getToken","auth","password","deviceIdentifier","userId","authUserId","fetch","method","body","appId","headers","Content-Type","then","response","status","console","error","statusText","token","onAuthenticated","catch","localStorage","setInterval","poll","automate","pullGameData","lastSavedState","updateProhibited","gameStateLocked","newBaton","myUserId","timeout","Date","now","boardStateSource","stateToJson","boardState","needsPush","diff","warn","stateChangesWhileNotMyTurn","baton","Authorization","accessType","meta","onExchange","aIndex","findIndex","bIndex","newIndex","scooched","change","canSelect","seedTile","indexRow","Math","floor","seedRow","abs","canScooch","keyA","keyB","getIndex","tick","myPlayer","_loop","_i","space","random","pendingDrops","clearDrops","pop","forceUpdate","availableLetters","sample","uniqBy","shift","onClickItem","onNuke","onPass","onPlay","_this$state","canNuke","automated","possibilities","findWords","sort","tilePoints","tileSelected","onSmear","toString","preserveIndex","tileToDeselect","smeared","showMenu","open","hideMenu","onReset","playedWord","tileBonusPoints","unshift","drops","playMove","announceGoal","without","query","queryString","location","_response$meta","hydrateAppState","ensureParticipant","prevProps","prevState","clearTimeout","setTimeout","solo","history","pushState","path","baseState","omit","clearInterval","unassignedPlayer","Alert_default","Heading","selectableLetters","onDone","playLabel","isWord","scoredPlayers","score","overHeader","stars","playedTile","starsString","Container_default","fluid","renderModal","sm","itIsMyTurn","ButtonGroup_default","item","backgroundImage","backgroundSize","backgroundRepeat","currentPlayer","humanizeDuration","onAnimationEnd","message","SlideGrid","canExchange","tap","done","smear","exchange","GoalListComponent_GoalListComponent","isCurrentPlayer","wordContent","url","stuff","Blob","URL","revokeObjectURL","createObjectURL","jsonToUrl","RulesComponent_RulesComponent","_this$state2","renderQrDialog","renderMainMenu","_this5","InviteComponent_InviteComponent","passWillResign","MainMenuComponent_MainMenuComponent","assign","announce","distance","_this6","_this7","zid","_this8","_loop2","_loop3","hydrateGoals","fromJson","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0b293f8a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tile.e1eb2eab.svg\";","import {IGoal} from 'Goals';\nimport React from 'react';\nimport Badge from 'react-bootstrap/Badge';\nimport Col from 'react-bootstrap/Col';\nimport Image from 'react-bootstrap/Image';\nimport Row from 'react-bootstrap/Row';\nimport \"Goals.css\";\nimport tile from \"tile.svg\";\n\nexport class GoalComponent extends React.PureComponent<{\n    mode: \"vertical\" | \"horizontal\",\n    goal: IGoal,\n    id: number,\n    className: string,\n}> {\n    public render() {\n        switch (this.props.mode) {\n            case \"vertical\":\n                return this.renderVertical();\n            case \"horizontal\":\n                return this.renderHorizontal();\n        }\n    }\n\n    private renderVertical() {\n        return (\n            <Row key={this.props.id} className={this.props.className}>\n                <Col md={10}>\n                    <Badge variant=\"warning\">{this.props.goal.type}</Badge>\n                    <br/>\n                    {this.props.goal.description}\n                </Col>\n                <Col md={2}>\n                    <Badge variant=\"success\" pill={true}>\n                        +{this.props.goal.points}\n                    </Badge>\n                </Col>\n            </Row>\n        );\n    }\n    private renderHorizontal() {\n        return (\n            <Col key={this.props.id} className={this.props.className} xs={4}>\n                <div>\n                <Row>\n                    <div className=\"bonus-circle\">\n                        +{this.props.goal.points}\n                    </div>\n                </Row>\n                <Row>\n                <Col className=\"flex-grow\">\n                        {this.props.goal.description}\n                    </Col>\n                </Row>\n                </div>\n            </Col>\n        );\n    }\n}\n","import {ITile} from 'App';\nimport {GoalComponent} from 'GoalComponent';\nimport {IGoal} from 'Goals';\nimport compact from 'lodash/compact';\nimport {IPlay} from 'Move';\nimport React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nexport class GoalListComponent extends React.PureComponent<{\nmode: \"vertical\" | \"horizontal\",\n  goals: IGoal[];\n  pendingMove: IPlay;\n  board: ITile[];\n  canPlay: boolean;\n}> {\n    public render() {\n        switch (this.props.mode) {\n            case \"vertical\":\n                return this.renderVertical();\n            case \"horizontal\":\n                return this.renderHorizontal();\n        }\n    }\n\n    private renderVertical() {\n        const {goals, pendingMove: move, canPlay, board} = this.props;\n\n        return <Card>\n            <Card.Header>Goals</Card.Header>\n            <Card.Body>\n                {goals.map((goal, index) => {\n                    const possible = goal.possible(board);\n                    const thisMoveQualifies = canPlay && goal.check(move);\n                    const classNames = ['goal', thisMoveQualifies && 'qualifies', possible && 'possible'];\n                    const className = compact(classNames).join(' ')\n                    return <GoalComponent goal={goal} id={index} key={index} className={className}\n                                          mode={\"horizontal\"}/>;\n                })}\n            </Card.Body>\n        </Card>;\n    }\n\n    private renderHorizontal() {\n        const {goals, pendingMove: move, canPlay, board} = this.props;\n\n        return <><Row className=\"goals-header\">\n            <Col xs={1}/>\n            <Col className=\"hr flex-grow\"/>\n            <Col className=\"goals-title\" xs={\"auto\"}>Goals</Col>\n            <Col className=\"hr flex-grow\"/>\n            <Col xs={1}/>\n        </Row>\n        <Row className={\"goals-horizontal\"}>\n                {goals.map((goal, index) => {\n                    const possible = goal.possible(board);\n                    const thisMoveQualifies = canPlay && goal.check(move);\n                    const classNames = ['goal', thisMoveQualifies && 'qualifies', possible && 'possible'];\n                    const className = compact(classNames).join(' ')\n                    return <GoalComponent goal={goal} id={index} key={index} className={className}\n                                          mode={\"horizontal\"}/>;\n                })}\n        </Row></>;\n    }\n}\n","import { ITile } from './App';\nimport { IPlay } from \"./Move\";\n\ntype GoalType = 'Get Moving' | 'Over It' | 'Double Up' | 'Up Front' | 'Cheapskate' | 'Shortie';\n\nexport interface IGoal {\n    type: GoalType;\n    description: string;\n    points: number;\n    possible(board: ITile[]): boolean | \"maybe\";\n    check(move: IPlay): boolean;\n}\n\nabstract class Goal implements IGoal {\n    abstract type: GoalType;\n    abstract get description(): string;\n    abstract points: number;\n    possible(board: ITile[]) {\n        const letters = board.map((t) => t.letter).join(\"\");\n        return this.possibleWithBoard(letters);\n    }\n    check(move: IPlay): boolean {\n        const word = move.word.map((t) => t.letter).join(\"\");\n        return this.checkWord(word);\n    }\n    abstract possibleWithBoard(board: string): boolean;\n    abstract checkWord(word: string): boolean;\n}\n\nexport class VerbGoal extends Goal {\n    type = \"Get Moving\" as GoalType;\n    description = \"Play something ending in 'ing'\";\n    points = 10;\n    possibleWithBoard(board: string) {\n        return board.includes(\"I\") &&board.includes(\"N\") &&board.includes(\"G\");        \n    }\n    checkWord(word: string): boolean {\n        return word.endsWith(\"ING\");\n    }\n    public static fromJson(json: any) {\n        return new VerbGoal();\n    }\n}\n\nexport class VerbPastGoal extends Goal {\n    type = \"Over It\" as GoalType;\n    description = \"Play something ending in 'ed'\";\n    points = 8;\n    possibleWithBoard(board: string) {\n        return board.includes(\"E\") &&board.includes(\"D\");        \n    }\n    checkWord(word: string): boolean {\n        return word.endsWith(\"ED\");\n    }\n    public static fromJson(json: any) {\n        return new VerbPastGoal();\n    }\n}\n\nexport class DoublesGoal extends Goal {\n    type = \"Double Up\" as GoalType;\n    get description() { return `Play something with two '${this.letter}'s`; }\n    points = 7;\n    private readonly letter: string;\n    constructor(letter: string) {\n        super();\n        this.letter = letter;\n    }\n    possibleWithBoard(board: string) {\n        return board.split(this.letter).length >= 3;\n    }\n    checkWord(word: string): boolean {\n        return word.split(this.letter).length >= 3;\n    }\n    public static fromJson(json: any) {\n        return new DoublesGoal(json.letter);\n    }\n}\n\nexport class StartsWithGoal extends Goal {\n    type = \"Up Front\" as GoalType;\n    get description() { return `Play something that starts with '${this.letter}'`; }\n    points = 5;\n    private readonly letter: string;\n    constructor(letter: string) {\n        super();\n        this.letter = letter;\n    }\n    possibleWithBoard(board: string) {\n        return board.split(this.letter).length >= 2;\n    }\n    checkWord(word: string): boolean {\n        return word.startsWith(this.letter);\n    }\n    public static fromJson(json: any) {\n        return new StartsWithGoal(json.letter);\n    }\n}\n\nexport class CheapskateGoal implements IGoal {\n    possible(board: ITile[]) {\n        if (board.filter((e) => (e.points || 0) < 2).length >= 3) {\n            return \"maybe\";\n        }\n        return false;\n    }\n    check(move: IPlay): boolean {\n        return !move.word.some((t) => (t.points || 0) > 2);\n    }\n    type = \"Cheapskate\" as GoalType;\n    get description() { return `Only use tiles worth one or two points`; }\n    points = 10;\n    public static fromJson(json: any) {\n        return new CheapskateGoal();\n    }\n}\n\nexport class LengthGoal implements IGoal {\n    length: number;\n    constructor(length: number) {\n        this.length = length;\n    }\n    possible(board: ITile[]) {\n        return true;\n    }\n    check(move: IPlay): boolean {\n        return move.word.length === this.length;\n    }\n    type = \"Shortie\" as GoalType;\n    get description() { return `Play something ${this.length} letters long`; }\n    points = 10;\n    public static fromJson(json: any) {\n        return new LengthGoal(json.length);\n    }\n}\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport { ITileSet, ITileDefinition } from \"TileDefinitions\";\nimport Card from \"react-bootstrap/Card\";\nimport { ITile } from \"App\";\n\ninterface ITileSetComponentProps {\n    tileSet: ITileSet;\n    bag?: ITile[];\n}\n\ninterface ITileSetComponentState {\n\n}\n\n@observer\nclass TileDefinitionComponent extends React.Component<{ tileDefinition: ITileDefinition, remaining?: number }> {\n    public render() {\n        const { remaining, tileDefinition } = this.props;\n        const { letter, points, count } = tileDefinition;\n        return <div className=\"tile-definition\">\n            <div className=\"tile\">\n                <div className=\"field\">\n                    <div className=\"letter\">{letter}</div>\n                    <div className=\"points\">{points}</div>\n                </div>\n            </div>\n            &nbsp;x&nbsp;{remaining ? `${remaining}/` : \"\"}{count}\n        </div>\n    }\n}\n\n@observer\nexport class TileSetComponent extends React.Component<ITileSetComponentProps, ITileSetComponentState> {\n    public render() {\n        const { name, tiles } = this.props.tileSet;\n        return <Card className=\"moves\">\n            <Card.Header>{name}</Card.Header>\n            <Card.Body>\n                {tiles.map((tileDefinition, index) => {\n                    let remaining: number | undefined = undefined;\n                    if (this.props.bag) {\n                        remaining = this.props.bag.filter((tile) => tile.letter === tileDefinition.letter).length;\n                    }\n                    return <TileDefinitionComponent\n                        key={index}\n                        tileDefinition={tileDefinition}\n                        remaining={remaining} />;\n                })}\n            </Card.Body>\n        </Card>\n    }\n}\n\nexport default TileSetComponent;\n","import React from 'react';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Card from 'react-bootstrap/Card';\n\nexport default function AccordionCell(props: {\n  eventKey: string;\n  title: React.ReactNode;\n  children?: React.ReactNode;\n  onSelect(eventKey: string): void;\n}) {\n    const onClick = props.onSelect ? () => props.onSelect(props.eventKey) : undefined;\n  return <Card>\n    <Accordion.Toggle as={Card.Header} eventKey={props.eventKey} style={{ cursor: \"pointer\" }} onClick={onClick}>\n      {props.title}\n    </Accordion.Toggle>\n    <Accordion.Collapse eventKey={props.eventKey}>\n      <Card.Body>\n        {props.children}\n      </Card.Body>\n    </Accordion.Collapse>\n  </Card>;\n}\n","import React from \"react\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport Form from 'react-bootstrap/Form';\nimport TileSetComponent from 'TileSetComponent';\nimport { IScoochOptions, ITile } from \"App\";\nimport Badge from \"react-bootstrap/Badge\";\nimport Button from \"react-bootstrap/Button\";\nimport AccordionCell from \"AccordionCell\";\nimport { TileSet } from \"TileDefinitions\";\n\ninterface IRulesProps {\n    options: IScoochOptions;\n    tileSet: TileSet;\n    bag: ITile[];\n\n    changeOptions(change: (options: IScoochOptions) => IScoochOptions): void;\n    resetOptions(): void;\n}\n\ninterface IRulesState {\n  version: string;\n  activeEventKey: string | undefined;\n}\n\nconst SESSION_STORAGE_KEY = \"rulesState\";\n\nconst CURRENT_VERSION = \"0.4.2\";\n\nexport default class RulesComponent extends React.Component<IRulesProps, IRulesState> {    \n    constructor(props: IRulesProps) {\n        super(props);\n        const stateString = sessionStorage.getItem(SESSION_STORAGE_KEY);\n        if (stateString) {\n            try {\n                const state = JSON.parse(stateString) as IRulesState;\n                if (state.version !== CURRENT_VERSION) {\n                  state.activeEventKey = \"help-new\";\n                  state.version = CURRENT_VERSION;\n                }\n                this.state = state;\n                return;\n            } catch {\n                sessionStorage.removeItem(SESSION_STORAGE_KEY);\n            }\n        }\n        this.state = { activeEventKey: \"help-new\", version: CURRENT_VERSION };\n    }\n\n    public componentDidUpdate() {\n        sessionStorage.setItem(SESSION_STORAGE_KEY, JSON.stringify(this.state));\n    }\n\n    public render() {\n        const {options, tileSet, bag, changeOptions, resetOptions} = this.props;\n        return <Accordion className=\"mt-5\" defaultActiveKey={this.state.activeEventKey}>\n        <AccordionCell onSelect={this.onSelect} eventKey=\"help-new\" title={`What’s New (v${CURRENT_VERSION})`}>\n          <dl>\n            <dt>Goals</dt>\n            <dd>There are now randomly-selected bonus goals shown below the play area. Complete them to earn bonus points!</dd>\n\n            <dt>Automation</dt>\n            <dd>Play against the computer, or have it take over for someone! Select the \"Automated\" option under a player’s name.</dd>\n          </dl>\n        </AccordionCell>\n\n        <AccordionCell onSelect={this.onSelect} eventKey=\"help-words\" title=\"Making Words\">\n          <ul>\n            <li>Click <span className=\"field\">tiles</span> to add them to your word.</li>\n            <li>Click a <span className=\"field selected\">selected</span> tile to remove it from your word.</li>\n            <li>You may only add tiles <span className=\"field\">close</span> to the last letter of your word — other tiles are <span className=\"field unselectable\">too far</span>.</li>\n            <li>Never fear! You may scooch tiles around to make the word you want! Whether <span className=\"field\">near</span> or <span className=\"field unselectable\">far</span>, just drag tiles to where you need them.</li>\n            <li>When you scooch a tile, it switches places with its neighbor, and both tiles lose their point values.</li>\n            {options.oneScoochPerTurn && <li><Accordion.Toggle as={Badge} eventKey=\"options\" variant=\"secondary\">Option</Accordion.Toggle> You may only scooch one tile per turn, though you can move it as far as you want, and don't have to do it all at once.</li>}\n            {options.bonusForLongerWords && <li><Accordion.Toggle as={Badge} eventKey=\"options\" variant=\"secondary\">Option</Accordion.Toggle> Play longer words to get bonus points!</li>}\n          </ul>\n        </AccordionCell>\n    \n        <AccordionCell onSelect={this.onSelect} eventKey=\"help-end-turn\" title=\"Ending Your Turn\"><p>\n          Once you’re happy with your word, click the <Badge variant=\"primary\">Play Word</Badge> button.\n          e tiles that make up your word go onto the scoreboard,\n            tiles left on the board drop down into their places,\n              w tiles slide in from the top to fill up the board.\n                s you scooched but didn’t use get their points back,\n          and it’s the next player’s turn!\n        </p></AccordionCell>\n    \n        <AccordionCell onSelect={this.onSelect} eventKey=\"help-nuke\" title=\"The Nuclear Option\"><p>\n          Also known as “flipping the table,” once per game each player may use the <Badge variant=\"warning\">Nuke</Badge> button to throw all the tiles on the board back into the bag and draw new ones.\n          There is no penalty — you won’t lose your turn or any points — but you may only use the nuclear option once!\n        </p></AccordionCell>\n    \n        <AccordionCell onSelect={this.onSelect} eventKey=\"help-end\" title=\"End of the Game\"><p>\n          When the tile bag is empty, you’ll notice empty spaces left on the board after tiles drop down.\n          (You can't scooch with those empty spaces.)\n          Eventually, there won’t be more words to make, and you’ll have to <Badge variant=\"secondary\">Pass</Badge>.\n          After all players pass in a row, the game ends, and the player with the most points wins!\n        </p></AccordionCell>\n    \n        <AccordionCell onSelect={this.onSelect} eventKey=\"help-tiles\" title=\"Tile Distribution\">\n          <TileSetComponent tileSet={tileSet} bag={bag} />\n        </AccordionCell>\n    \n        <AccordionCell onSelect={this.onSelect} eventKey=\"help-proto\" title=\"Prototype Notes\"><dl>\n          <dt>Scooch Limit</dt>\n          <dd>\n            When playing with the physical prototype, we generally made the rule that you could only scooch one tile\n            per turn, though you could move it as far as you wanted.Right now this version does <i>not</i> limit you\n            to a single scooch per turn, but that may change.\n          </dd>\n          <dt>Point Values</dt>\n          <dd>\n            The big tiles (\n            <span className=\"field\">J</span>\n            <span className=\"field\">Q</span>\n            <span className=\"field\">X</span>\n            <span className=\"field\">Z</span>) are way too valuable — without the riposte available in games like\n            rabble™ and Words With Friends™ they’re completely dominant in final scoring.I did run a test\n                 physical prototype where scores were compressed, with the highest score being five, and the\n                  re far more balanced (and felt fair) but were also boring.I need to find a blance — perhaps\n            with the big tiles scoring seven points — to restore the excitement and variability.\n          </dd>\n        </dl></AccordionCell>\n    \n        <AccordionCell onSelect={this.onSelect} eventKey=\"options\" title=\"Options\">\n          <Form.Check type=\"checkbox\" id=\"on-scooch\" label=\"One scooch per turn\" checked={!!options.oneScoochPerTurn} onChange={() => changeOptions((originalOptions) => {\n            const options = {...originalOptions};\n            options.oneScoochPerTurn = !options.oneScoochPerTurn;\n            return options;\n          })} />\n          <Form.Check type=\"radio\" id=\"on-length-none\" label=\"No bonus points for longer words\" checked={!!options.bonusForLongerWords === false} onChange={() => changeOptions((originalOptions) => {\n            const options = {...originalOptions};\n            options.bonusForLongerWords = false;\n            return options;\n          })} />\n          <Form.Check type=\"radio\" id=\"on-length\" label=\"One bonus point for each letter over four tiles\" checked={options.bonusForLongerWords === \"constant\"} onChange={() => changeOptions((originalOptions) => {\n            const options = {...originalOptions};\n            options.bonusForLongerWords = \"constant\";\n            return options;\n          })} />\n          <Form.Check type=\"radio\" id=\"on-length-linear\" label=\"Increasing bonus points for words over three tiles\" checked={options.bonusForLongerWords === \"linear\"} onChange={() => changeOptions((originalOptions) => {\n            const options = {...originalOptions};\n            options.bonusForLongerWords = \"linear\";\n            return options;\n          })} />\n          <Button onClick={() => resetOptions()}>Reset</Button>\n        </AccordionCell>\n    \n        <AccordionCell onSelect={this.onSelect} eventKey=\"dictionary\" title=\"Acceptable Words\">\n          <p>\n            Words need to be at least three letters long and are checked against the <a href=\"https://diginoodles.com/The_English_Open_Word_List_%28EOWL%29\" target=\"_blank\" rel=\"noopener noreferrer\">English Open Word List</a> (EOWL).\n          </p>\n          <dl>\n            <dt>\n              UK Advanced Cryptics Dictionary Licensing Information\n            </dt>\n            <dd>\n              Copyright © J Ross Beresford 1993-1999. All Rights Reserved.The following restriction is placed on the use of this publication: if the UK Advanced Cryptics Dictionary is used in a software package or redistributed in any form, the copyright notice must be prominently displayed and the text of this document must be included verbatim.\n            </dd>\n            <dt>\n              <a href=\"https://diginoodles.com/The_English_Open_Word_List_%28EOWL%29\" target=\"_blank\" rel=\"noopener noreferrer\">The English Open Word List</a>\n            </dt>\n            <dd>\n              The EOWL was developed by Ken Loge, and based on the above UKACD, but he explicitly placed no additional rescrtictions on its use.\n            </dd>\n          </dl>\n    \n        </AccordionCell>\n      </Accordion>;\n    }\n\n    private onSelect = (activeEventKey: string) => this.setState((state) => {\n        if (state.activeEventKey === activeEventKey) {\n            return {activeEventKey: undefined};\n        } else {\n            return {activeEventKey};\n        }\n    });\n}\n","export type TrieEntry = Trie | 1 | undefined;\nexport type Word = Array<{ letter: string }>;\n\ninterface Trie {\n  [key: string]: TrieEntry,\n}\n\nconst TRIE: Trie = require(\"./trie.json\");\n\nfunction find(word: Word) {\n  let t: TrieEntry = TRIE;\n  word.forEach((tile) => {\n    if (typeof t === \"object\") {\n      t = t[tile.letter.toLocaleLowerCase()];\n    }\n  });\n  return t;\n}\n\nexport default function isWord(word: Word) {\n  const t = find(word);\n  return typeof t === \"object\" && t[\"_\"] === 1;\n}\n\nexport function getPrefixInfo(prefix: Word) {\n  const t = find(prefix);\n  if (typeof t !== \"object\") {\n    return undefined;\n  }\n  const next = Object.getOwnPropertyNames(t);\n  const validIndex = next.indexOf(\"_\");\n  const valid = validIndex >= 0;\n  if (valid) {\n    next.splice(validIndex, 1);\n  }\n  if (next.length === 0) {\n    return true;\n  }\n  return { valid, next }\n}\n","import {observable} from \"mobx\";\n\nexport interface ITileDefinition {\n  letter: string;\n  count: number;\n  points: number;\n}\n\nexport class TileDefinition implements ITileDefinition {\n  @observable\n  public letter: string;\n\n  @observable\n  public count: number;\n\n  @observable\n  public points: number;\n\n  constructor(props: ITileDefinition) {\n    this.letter = props.letter;\n    this.count = props.count;\n    this.points = props.points;\n  }\n}\n\nexport interface ITileSet {\n  name: string;\n  tiles: ITileDefinition[];\n}\n\nexport class TileSet implements ITileSet {\n  @observable\n  public name: string;\n  \n  @observable\n  public tiles: ITileDefinition[];\n\n  constructor(name?: string, tiles?: ITileDefinition[]) {\n    this.name = name || \"Untitled\";\n    this.tiles = tiles || [];\n  }\n}\n\nconst DefaultTileDefinitions = [\n{\n    letter: \"A\",\n    count: 9,\n    points: 1,\n  },\n  {\n    letter: \"B\",\n    count: 2,\n    points: 4,\n  },\n  {\n    letter: \"C\",\n    count: 2,\n    points: 4,\n  },\n  {\n    letter: \"D\",\n    count: 5,\n    points: 2,\n  },\n  {\n    letter: \"E\",\n    count: 13,\n    points: 1,\n  },\n  {\n    letter: \"F\",\n    count: 2,\n    points: 4,\n  },\n  {\n    letter: \"G\",\n    count: 3,\n    points: 3,\n  },\n  {\n    letter: \"H\",\n    count: 4,\n    points: 3,\n  },\n  {\n    letter: \"I\",\n    count: 6,\n    points: 1,\n  },\n  {\n    letter: \"J\",\n    count: 1,\n    points: 10,\n  },\n  {\n    letter: \"K\",\n    count: 1,\n    points: 5,\n  },\n  {\n    letter: \"L\",\n    count: 4,\n    points: 2,\n  },\n  {\n    letter: \"M\",\n    count: 2,\n    points: 4,\n  },\n  {\n    letter: \"N\",\n    count: 5,\n    points: 2,\n  },\n  {\n    letter: \"O\",\n    count: 8,\n    points: 1,\n  },\n  {\n    letter: \"P\",\n    count: 2,\n    points: 4,\n  },\n  {\n    letter: \"Q\",\n    count: 1,\n    points: 10,\n  },\n  {\n    letter: \"R\",\n    count: 6,\n    points: 1,\n  },\n  {\n    letter: \"S\",\n    count: 5,\n    points: 1,\n  },\n  {\n    letter: \"T\",\n    count: 7,\n    points: 1,\n  },\n  {\n    letter: \"U\",\n    count: 4,\n    points: 2,\n  },\n  {\n    letter: \"V\",\n    count: 2,\n    points: 5,\n  },\n  {\n    letter: \"W\",\n    count: 2,\n    points: 4,\n  },\n  {\n    letter: \"X\",\n    count: 1,\n    points: 8,\n  },\n  {\n    letter: \"Y\",\n    count: 2,\n    points: 3,\n  },\n  {\n    letter: \"Z\",\n    count: 1,\n    points: 10,\n  },\n].map((e) => new TileDefinition(e));\n\nconst DefaultTileSet: ITileSet = new TileSet(\"Default\",  DefaultTileDefinitions)\n\nexport default [DefaultTileSet];\n","import { ITile } from 'App';\nimport { getPrefixInfo } from './isWord';\n\nexport default class WordFinder {\n    private board: ITile[];\n    private width: number;\n    private onWordFound: (word: ITile[]) => void;\n\n    constructor(board: ITile[], width: number, onWordFound: (word: ITile[]) => void) {\n        this.board = board;\n        this.width = width;\n        this.onWordFound = onWordFound;\n    }\n\n    public findWords() {\n        for (let y = 0; y < this.board.length / this.width; y++) {\n            for (let x = 0; x < this.width; x++) {\n                const seed = this.width * y + x;\n                this.search(seed, []);\n            }            \n        }\n    }\n\n    private adjacent(pos: number) {\n        const {board, width} = this;\n        const x = pos % width;\n        const y = (pos - x) / width;\n        const result: number[] = [];\n        if (x > 0) {\n            result.push(pos - 1);\n            if (y > 0) {\n                result.push(pos - 1 - width);\n            }\n            if (y < (board.length / width) - 1) {\n                result.push(pos - 1 + width);\n            }\n        }\n        if (y > 0) {\n            result.push(pos - width);\n        }\n        if (x < width - 1) {\n            result.push(pos + 1);\n            if (y > 0) {\n                result.push(pos + 1 - width);\n            }\n            if (y < (board.length / width) - 1) {\n                result.push(pos + 1 + width);\n            }\n        }\n        if (y < (board.length / width) - 1) {\n            result.push(pos + width);\n        }\n        return result;\n    }\n\n    private adjacentFree(pos: number, word: ITile[]) {\n        return this.adjacent(pos).filter((e) => {\n            const tile = this.board[e];\n            if (tile.type !== \"letter\") {\n                return false;\n            }\n            if (word.includes(tile)) {\n                return false;\n            }\n            return true;\n        });\n    }\n\n    private search(pos: number, word: ITile[]) {\n        const tile = this.board[pos];\n        if (tile.type !== \"letter\") {\n            return;\n        }\n        word.push(tile);\n        const info = getPrefixInfo(word);\n        if (info === undefined) {\n            return;\n        }\n        if (info === true || info.valid) {\n            this.onWordFound(word);\n        }\n        if (info !== true) {\n            const af = this.adjacentFree(pos, word);\n            af.forEach((nextPos) => {\n                const nextTile = this.board[nextPos];\n                if (info.next.includes(nextTile.letter.toLowerCase())) {\n                    this.search(nextPos, [...word]);\n                }\n            });\n        }\n    }\n}\n","import Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport * as React from \"react\";\nimport Figure from \"react-bootstrap/Figure\";\nimport Badge from \"react-bootstrap/Badge\";\nimport compact from \"lodash/compact\";\n\ninterface IMenuItemProps {\n    icon: string;\n    title: string;\n    description: string;\n    disabled?: boolean;\n    badge?: string | number;\n    onClick(): void;\n    onClickDisabled?(): void;\n}\n\nexport default class MenuItemComponent extends React.Component<IMenuItemProps> {\n    render() {\n        const {icon, badge, title, description, disabled, onClick, onClickDisabled} = this.props;\n        return <Row className={compact([\"menu-item\", disabled && \"disabled\"]).join(\" \")} onClick={disabled ? onClickDisabled : onClick}>\n            <Col xs={2} className=\"left\">\n                <Figure>\n                    <Figure.Image src={icon}/>\n                </Figure>\n            </Col>\n            <Col className={\"right flex-grow\"}>\n                <Row>\n                    <Col className={\"title flex-grow\"}>\n                        {title}\n                    </Col>\n                    <Col xs={\"auto\"}>\n                        {badge && <Badge variant={\"success\"} pill={true}>{badge}</Badge>}\n                    </Col>\n                </Row>\n                <Row className={\"description\"}>\n                    <Col className={\"flex-fill\"}>\n                        <span>\n                            {description}\n                        </span>\n                    </Col>\n                </Row>\n            </Col>\n        </Row>;\n    }\n}\n","import Modal from \"react-bootstrap/Modal\";\nimport \"Menus.css\";\nimport MenuItemComponent from \"./MenuItemComponent\";\nimport * as React from \"react\";\nimport tile from \"tile.svg\";\n\ninterface IMainMenuProps {\n    show: boolean;\n    hide(): void;\n\n    help?(section: \"how-to\"): void;\n\n    canReset: boolean;\n    reset(): void;\n\n    usedNuke: boolean;\n    noMoreTiles: boolean;\n    nuke(): void;\n\n    canPass: boolean;\n    passWillEndGame: boolean;\n    pass(): void;\n}\n\nexport default class MainMenuComponent extends React.Component<IMainMenuProps> {\n    public render() {\n        const {show, hide,\n\n            canReset, reset,\n            canPass, passWillEndGame, pass,\n\n            usedNuke, noMoreTiles, nuke} = this.props;\n\n        let nukeTitle = \"Discard all tiles and draw new ones. You may only do this once per game.\";\n        if (usedNuke) {\n            nukeTitle = \"You may only use the nuclear option once per game.\";\n        } else if (noMoreTiles) {\n            nukeTitle = \"It’s too late to use the nuclear option.\";\n        }\n\n        return <Modal className=\"main-menu\" show={show} onHide={hide} backdrop={true}>\n            <Modal.Body>\n                <MenuItemComponent\n                    title={\"How to Play\"}\n                    description={\"Getting started and rules of the game\"}\n                    icon={tile}\n                    disabled={true}\n                    onClick={() => {throw new Error(\"Not Implemented\")}}\n                />\n\n                <MenuItemComponent\n                    title={\"Dictionary\"}\n                    description={\"Information about which words are acceptable\"}\n                    icon={tile}\n                    disabled={true}\n                    onClick={() => {throw new Error(\"Not Implemented\")}}\n                />\n\n                <MenuItemComponent\n                    title={\"Tile Distribution\"}\n                    description={\"How many tiles there are of each letter and how many remain in the bag\"}\n                    icon={tile}\n                    disabled={true}\n                    onClick={() => {throw new Error(\"Not Implemented\")}}\n                />\n\n                <MenuItemComponent\n                    title={\"Reset\"}\n                    description={\"Return tiles to their original positions, restoring their point values.\"}\n                    icon={tile}\n                    disabled={!canReset}\n                    onClick={reset}\n                />\n\n                <MenuItemComponent\n                    title={passWillEndGame ? \"Pass\" : \"Finish\"}\n                    description={passWillEndGame ? \"Finish the game\" : \"No moves? Pass your turn\"}\n                    icon={tile}\n                    disabled={!canPass}\n                    onClick={pass}\n                />\n\n                <MenuItemComponent\n                    title={\"Nuke\"}\n                    description={nukeTitle}\n                    icon={tile}\n                    badge={usedNuke ? 0 : 1}\n                    disabled={usedNuke}\n                    onClick={nuke}\n                />\n\n                <MenuItemComponent\n                    title={\"Resign\"}\n                    description={\"End this game, but it counts as a loss\"}\n                    icon={tile}\n                    disabled={true}\n                    onClick={() => {throw new Error(\"Not Implemented\")}}\n                />\n            </Modal.Body>\n        </Modal>;\n    }\n}\n","export function phone() {\n    return window.innerWidth < 576;\n}\n","import SlideGrid from '@pyrogenic/slide-grid/lib/SlideGrid';\nimport * as diff from \"deep-diff\";\nimport { GoalListComponent } from 'GoalListComponent';\nimport { CheapskateGoal, DoublesGoal, IGoal, LengthGoal, StartsWithGoal, VerbGoal, VerbPastGoal } from 'Goals';\nimport humanizeDuration from \"humanize-duration\";\nimport compact from 'lodash/compact';\nimport omit from 'lodash/omit';\nimport sample from 'lodash/sample';\nimport uniqBy from 'lodash/uniqBy';\nimport without from 'lodash/without';\nimport * as queryString from \"querystring\";\nimport React from 'react';\nimport Alert from 'react-bootstrap/Alert';\nimport Badge from 'react-bootstrap/Badge';\nimport Button from 'react-bootstrap/Button';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport RulesComponent from 'RulesComponent';\nimport uuid from 'uuid/v4';\nimport './App.css';\nimport isWord from './isWord';\nimport { IPlay, IPlayedTile, Move } from './Move';\nimport tile from \"./tile.svg\";\nimport TileSets from './TileDefinitions';\nimport WordFinder from './WordFinder';\nimport MainMenuComponent from \"./MainMenuComponent\";\nimport InviteComponent from \"./InviteComponent\";\n\nconst PLAYER_NAME_KEY = \"PlayerName\";\n\nexport const DEFAULT_PLAYER_NAME = \"Anonymous\";\n\nexport interface ITile {\n  type: \"letter\" | \"space\" | \"drop\";\n  id: string;\n  letter: string;\n  points: number;\n  renderIndex?: number;\n  drop: number;\n}\n\nenum MoveTypes {\n  pass = \"pass\",\n  nuke = \"nuke\",\n  play = \"play\",\n}\n\ntype Variant = undefined\n  | 'primary'\n  | 'secondary'\n  | 'success'\n  | 'danger'\n  | 'warning'\n  | 'info'\n  | 'dark'\n  | 'light'\n  | 'link'\n  | 'outline-primary'\n  | 'outline-secondary'\n  | 'outline-success'\n  | 'outline-danger'\n  | 'outline-warning'\n  | 'outline-info'\n  | 'outline-dark'\n  | 'outline-light';\n\ntype BadgeVariant = Exclude<Variant, \"link\"\n  | \"outline-primary\"\n  | 'outline-secondary'\n  | 'outline-success'\n  | 'outline-danger'\n  | 'outline-warning'\n  | 'outline-info'\n  | 'outline-dark'\n  | 'outline-light'>;\n\nconst MOVE_VARIANTS: { [P in MoveTypes]: BadgeVariant } = {\n  play: \"primary\",\n  nuke: \"warning\",\n  pass: \"secondary\",\n};\n\ninterface IPlayer {\n  name: string;\n  userId?: string;\n  words: Move[];\n  automated?: boolean;\n}\n\nexport interface IScoochOptions {\n  solo?: boolean;\n  oneScoochPerTurn?: boolean;\n  tileSetName?: string;\n  bonusForLongerWords?: false | \"constant\" | \"linear\";\n}\n\nconst DEFAULT_OPTIONS: IScoochOptions = {\n  oneScoochPerTurn: true,\n  bonusForLongerWords: \"linear\",\n}\n\ntype IAutomationAction = {\n  type: \"tap\", a: string,\n} | {\n  type: \"scooch\",\n  a: string,\n  b: string,\n} | {\ntype: \"submit\" | \"wait\" | \"nuke\" | \"pass\",\n}\n\nlet UID = 1;\n\ninterface IMenuState {\n  open?: boolean;\n}\n\ninterface IAnnouncement {\n  key: number,\n  title: string,\n  message: string,\n}\n\n/**\n * State held in the conversation meta and thus shared between players\n */\n// TODO: unflatten IAppState to make code and logic easier to follow.\ninterface ISharedState {\n  /**\n   * Represents a \"reservation\" of the right to change game state.  Mostly it was to help people put their names in\n   * when it isn't their turn at the beginning, but may not actually be necessary if the version field is properly\n   * respected (i.e. checked agains the local state after join but before edit).\n   */\n  baton?: {\n    userId: string,\n    timeout: number,\n  },\n\n  /**\n   * Same as the conversation id\n   */\n  gameId: string;\n\n  /**\n   * Optimistic concurrency version number for {gameState}\n   */\n  gameStateVersion: number;\n\n  // Would be part of this object if not flattened into {IAppState}\n  // gameState: IGameState,\n}\n\ninterface IGameState {\n  players: IPlayer[];\n  playerIndex: number;\n  nukers: number[];\n  passers: number[];\n  over: boolean;\n  announcements: IAnnouncement[];\n  options: IScoochOptions;\n  bag: ITile[];\n  board: ITile[];\n  original: ITile[];\n  word: ITile[];\n  reordered: ITile[];\n  scooched?: string;\n  smeared?: boolean;\n  goals: IGoal[];\n}\n\ninterface IAppState extends ISharedState, IGameState {\n  loading: string;\n  menuState: IMenuState;\n}\n\nfunction classNames(...classes: Array<string | false | undefined>) {\n  classes = compact(classes);\n  if (classes.length === 0) {\n    return undefined;\n  }\n  return classes.join(\" \");\n}\n\nfunction playerScore(player: IPlayer) {\n  return player.words.map((i) => i.type === \"play\" ? i.points + i.bonusPoints : 0).reduce((a, b) => (a + b), 0);\n}\n\nfunction getTileSet(tileSetName?: string) {\n  return TileSets.find((e) => e.name === tileSetName) || TileSets[0]!\n}\n\nfunction newGame(players?: IPlayer[], tileSetName?: string): IAppState {\n  const board: ITile[] = [];\n  const bag: ITile[] = [];\n  let id = 0;\n  const tileSet = getTileSet(tileSetName);\n  tileSet.tiles.forEach((data) => {\n    for (let j = 0; j < data.count; j++) {\n      bag.push({\n        type: \"letter\",\n        id: `tile-${id++}`,\n        letter: data.letter,\n        points: data.points,\n        drop: 0,\n      })\n    }\n  });\n  for (let j = 0; j < 16; j++) {\n    board.push({\n      type: \"drop\",\n      id: `blank-${j}`,\n    } as ITile)\n  }\n  players = players || [];\n  players.forEach((player) => player.words = []);\n  const options = { ...DEFAULT_OPTIONS, tileSetName: tileSet.name };\n  const gameId = uuid();\n  return { menuState: {}, loading: \"bootstrap\", gameStateVersion: 1, gameId, players, playerIndex: 0, bag, board, original: Array(...board), word: [], reordered: [], nukers: [], passers: [], over: false, options, goals: [], announcements: [] };\n}\n\n// Cache of generated json data URLs\nconst JSON_TO_URL_DATA: { [key: string]: string } = {};\n\nfunction jsonToUrl(key: string, stuff: any) {\n  const data = new Blob([JSON.stringify(stuff)], { type: \"application/json\" });\n\n  // If we are replacing a previously generated file we need to\n  // manually revoke the object URL to avoid memory leaks.\n  if (JSON_TO_URL_DATA[key]) {\n    window.URL.revokeObjectURL(JSON_TO_URL_DATA[key]);\n  }\n\n  JSON_TO_URL_DATA[key] = window.URL.createObjectURL(data);\n\n  // returns a URL you can use as a href\n  return JSON_TO_URL_DATA[key];\n}\n\ninterface IAuth {\n  userId: string;\n  zid: string;\n  password: string;\n  token: string;\n}\n\nconst APP_ID =  5005139;\n\ninterface IQuery {\n  gameId?: string;\n}\n\nfunction getQuery() {\n  return queryString.parse(window.location.search.split(\"?\").pop() || \"\") as IQuery;\n}\n\nexport class App extends React.Component<{}, IAppState> {\n  private automation: IAutomationAction[] = [];\n  private loadGameId?: string;\n  private forcePushGameData?: boolean;\n\n  private batonTimeout?: any;\n  private tickInterval?: any;\n  private pollInterval?: any;\n  private automateInterval?: any;\n  private pushImmediate?: any;\n\n  constructor(props: any) {\n    super(props);\n\n    // This is the local pass-and-play implementation, left here for reference.\n    //\n    // const stateString = sessionStorage.getItem(\"boardState\");\n    // if (stateString) {\n    //   try {\n    //     const state = JSON.parse(stateString) as IAppState;\n    //     App.hydrateAppState(state);\n    //     this.state = state;\n    //     return;\n    //   } catch {\n    //     sessionStorage.clear();\n    //   }\n    // }\n\n    this.loadGameId = sessionStorage.getItem(\"gameId\") || undefined;\n    const menuState = JSON.parse(sessionStorage.getItem(\"menuState\") || \"{}\");\n    this.state = {...newGame(), menuState};\n  }\n\n  public componentDidMount(): void {\n    this.tickInterval = setInterval(this.tick, 100);\n    const query = getQuery();\n    this.loadGameId = query.gameId;\n    this.getToken();\n  }\n\n  private getToken = () => {\n    if (this.auth) {\n      return;\n    }\n    let password = this.deviceIdentifier;\n    let userId = this.authUserId;\n    if (userId === undefined) {\n      this.setState({loading: \"register-device\"}, () =>\n      fetch(\"https://api.zynga.com/auth/registerDevice\",\n          {method: \"POST\", body: JSON.stringify({password, appId: APP_ID}), headers: {\"Content-Type\": \"application/json\"}})\n          .then((response) => response.json())\n          .then((auth: IAuth) => {\n            //console.log({registerDevice: auth});\n            localStorage.setItem(\"DeviceIdentifier\", password);\n            localStorage.setItem(\"AuthUserId\", auth.userId);\n            this.getToken();\n          })\n          .catch(console.error));\n      return;\n     }\n    this.setState({loading: \"authenticating\"}, () =>\n   fetch(\"https://api.zynga.com/auth/issueToken\",\n        {\n          method: \"POST\",\n          body: JSON.stringify({password, userId, appId: APP_ID}),\n          headers: {\"Content-Type\": \"application/json\"}\n        })\n        .then((response) => {\n          if (response.status < 400) {\n            return response.json();\n          } else {\n            console.error(response);\n            throw new Error(response.statusText);\n          }\n        })\n        .then((token) => {\n          if (token) {\n            //console.log({issueToken: token});\n            this.auth = {\n              password, userId, ...token,\n            };\n            this.onAuthenticated();\n          } else {\n            throw new Error(\"no json body\");\n          }\n        })\n        .catch(console.error));\n  }\n\n  private auth?: IAuth;\n\n  private get deviceIdentifier() {\n    return localStorage.getItem(\"DeviceIdentifier\") || uuid();\n  }\n\n  private get authUserId() {\n    return localStorage.getItem(\"AuthUserId\") || undefined;\n  }\n\n  private onAuthenticated = () => {\n    this.pollInterval = setInterval(this.poll, 5000);\n    this.automateInterval = setInterval(this.automate, 1000);\n    const gameId = this.loadGameId;\n    if (gameId) {\n      this.setState({loading: \"joining-game\"}, () =>\n          this.pullGameData(gameId));\n    }\n  };\n\n  private poll = () => {\n    if (!this.auth) {\n      return;\n    }\n    const gameId = this.loadGameId || this.state.gameId;\n    if (gameId) {\n      this.setState({loading: \"loading-game\"}, () =>\n        this.pullGameData(gameId));\n    }\n  }\n\n  private pullGameData(gameId: string) {\n    if (!this.auth) {\n      return;\n    }\n    fetch(\"https://api.zynga.com/conversation/join\",\n        {\n          method: \"POST\",\n          headers: {\"Content-Type\": \"application/json\", \"Authorization\": \"token \" + this.auth.token},\n          body: JSON.stringify({\n            accessType: \"public\",\n            id: gameId,\n          })\n        })\n        .then((response) => response.json())\n        .then((response) => {\n          const {baton, gameStateVersion, boardState} = response.meta;\n          this.batonTimeout = undefined;\n          if (typeof boardState === \"string\" && gameStateVersion > this.state.gameStateVersion) {\n            console.warn(`Pulled Game State: gameStateVersion ${this.state.gameStateVersion} => ${gameStateVersion}`);\n            const state: IAppState = JSON.parse(boardState) as IAppState;\n            const rawState: IAppState = JSON.parse(boardState) as IAppState;\n            App.hydrateAppState(state);\n            //console.log(explainDiff(diff.diff(rawState, state)));\n            this.setState({...state, baton, gameStateVersion, loading: \"ready\"} as any);\n            return;\n          } else {\n            this.setState({loading: \"ready\", baton}, this.ensureParticipant);\n          }\n        })\n        .catch(console.error);\n  }\n\n  /**\n   * Turn a serialized game state into a proper runtime state:\n   *  - ensure multiple serialization of the same object are turned back into references to a single object\n   *  - restore prototypes of objects that aren't pure state\n   *\n   * NB: this mutates {state} in-place\n   */\n  private static hydrateAppState(state: IAppState) {\n    // Restore object identities lost in serialization\n    // Any place where proper {ITile}s appear, we have to make sure they all reference the same object\n    for (let i = 0; i < state.word.length; i++) {\n      state.word[i] = state.board.find((tile) => tile.id === state.word[i].id)!;\n    }\n    for (let i = 0; i < state.reordered.length; i++) {\n      state.reordered[i] = state.board.find((tile) => tile.id === state.reordered[i].id)!;\n    }\n\n    // These were only for backwards-compatibility with state saved in {sessionStorage} but it's\n    // the sort of thing we schould consider doing if we add new required fields and don't want to break\n    // in-progress games.\n    //\n    // if (state.nukers === undefined) {\n    //   state.nukers = [];\n    // }\n    // if (state.passers === undefined) {\n    //   state.passers = [];\n    // }\n    // if (state.options === undefined) {\n    //   state.options = {};\n    // }\n    // if (state.announcements === undefined) {\n    //   state.announcements = [];\n    // }\n    // if (state.gameId === undefined) {\n    //   state.gameId = uuid();\n    // }\n\n    // Goals aren't plain-old-data-objects, so hydrate them\n    state.goals = this.hydrateGoals(state.goals || []);\n  }\n\n  private static hydrateGoals(goals: IGoal[]): IGoal[] {\n    return goals.map( (goal) => {\n        switch (goal.type) {\n          case \"Double Up\":\n            return DoublesGoal.fromJson(goal);\n          case \"Cheapskate\":\n            return CheapskateGoal.fromJson(goal);\n          case \"Get Moving\":\n            return VerbGoal.fromJson(goal);\n          case \"Over It\":\n            return VerbPastGoal.fromJson(goal);\n          case \"Shortie\":\n            return LengthGoal.fromJson(goal);\n          case \"Up Front\":\n            return StartsWithGoal.fromJson(goal);\n          default:\n            throw new Error(`Unknown goal type: ${goal.type}`);\n        }\n      });\n  }\n\n  private get myPlayer() {\n    if (!this.state.players) {\n      return undefined;\n    }\n    return this.state.players.find((p) => p.userId === this.myUserId);\n  }\n\n// private static finderUrl(gameId: string, gameStateVersion: number) {\n  // `  return `https://api.zynga.com/finder/app/${APP_ID}/index/${GAME_INDEX}/id/${gameId}?gameStateVersion=${gameStateVersion}`;\n  // }\n\n  private lastSavedState?: string;\n\n  private get itIsMyTurn() {\n    const myUserId = this.myUserId;\n    if (!myUserId) {\n      return false;\n    }\n    const currentPlayerUserId = this.currentPlayer.userId;\n    const isMyTurn = currentPlayerUserId === myUserId;\n    return isMyTurn;\n  }\n\n  private get currentPlayer() {\n    return this.state.players[this.state.playerIndex];\n  }\n\n  private get myUserId() {\n    if (!this.auth) {\n      return undefined;\n    }\n    return this.auth.zid;\n  }\n\n  public componentDidUpdate(prevProps: any, prevState: any) {\n    //console.log({componentDidUpdate: explainDiff(diff.diff(prevState, this.state))});\n    if (this.myPlayer && localStorage.getItem(PLAYER_NAME_KEY) !== this.myPlayer.name) {\n      localStorage.setItem(PLAYER_NAME_KEY, this.myPlayer.name);\n    }\n    if (!this.auth) {\n      return;\n    }\n    this.ensureParticipant();\n    if (this.state.reordered.length > 0 && (this.state.board.find((e, i) => this.state.original[i] !== e) === undefined)) {\n      this.setState({ reordered: [], scooched: undefined });\n    } else {\n      if (this.pushImmediate) {\n        clearTimeout(this.pushImmediate);\n      }\n      this.pushImmediate = setTimeout(this.push, 10);\n    }\n    if (this.state.baton) {\n      if (!this.batonTimeout) {\n        this.batonTimeout = setTimeout(() => this.setState((state) => {\n          this.batonTimeout = undefined;\n          if (state.baton && state.baton.timeout < Date.now()) {\n            return {baton: undefined};\n          }\n          return {};\n        }), this.state.baton.timeout - Date.now());\n      }\n    }\n    // Ensure that all participants have the same URL in their window so reloading doesn't start a new game:\n    if (this.state.options.solo !== undefined) {\n      if (window.location.href !== this.gameUrl) {\n        if (window.history.pushState) {\n          window.history.pushState({path: this.gameUrl}, '', this.gameUrl);\n        }\n      }\n    }\n    sessionStorage.setItem(\"menuState\", JSON.stringify(this.state.menuState));\n  }\n\n  private push = () => {\n    if (!this.auth) { return; }\n    const token = this.auth.token;\n    const updateProhibited = this.gameStateLocked;\n    const newBaton = {\n      userId: this.myUserId!,\n      timeout: Date.now() + 1000,\n    };\n    const boardStateSource = this.stateToJson(this.state);\n    const boardState = JSON.stringify(boardStateSource);\n    let needsPush = false;\n    if (this.lastSavedState) {\n      const stateDiff = diff.diff(JSON.parse(this.lastSavedState), JSON.parse(boardState));\n      //console.log({pushDiff: explainDiff(stateDiff)});\n      needsPush = !!stateDiff;\n    } else {\n      needsPush = true;\n    }\n    if (needsPush) {\n      //console.log(\"push!\");\n      if (!updateProhibited) {\n        this.forcePushGameData = false;\n        this.lastSavedState = boardState;\n        const {gameId} = this.state;\n        const gameStateVersion = this.state.gameStateVersion + 1;\n        fetch(\"https://api.zynga.com/conversation/join\",\n            {\n              method: \"POST\",\n              headers: {\"Content-Type\": \"application/json\", \"Authorization\": \"token \" + token},\n              body: JSON.stringify({\n                accessType: \"public\",\n                id: gameId,\n              })\n            })\n            .then((response) => response.json())\n            .then((response) => {\n              //console.log({join: response});\n              sessionStorage.setItem(\"gameId\", response.id);\n              // TODO: check our gameStateVersion against the one in the current meta to make sure we're not rewinding time.\n              return fetch(\"https://api.zynga.com/conversation/editConversationMeta\",\n                  {\n                    method: \"POST\",\n                    headers: {\"Content-Type\": \"application/json\", \"Authorization\": \"token \" + token},\n                    body: JSON.stringify({\n                      accessType: \"public\",\n                      id: gameId,\n                      meta: {baton: newBaton, gameStateVersion, boardState},\n                    })\n                  });\n            })\n            .then((response) => response.json())\n            .then((response) => {\n              //console.log({update: response});\n              this.batonTimeout = undefined;\n              this.setState({baton: newBaton, gameStateVersion});\n            })\n            .catch(console.error);\n      } else {\n        console.warn({\n          stateChangesWhileNotMyTurn: {\n            ...this.state,\n            loading: \"saved\", baton: undefined,\n            auth: undefined, gameStateVersion: undefined\n          }, lastSavedState: this.lastSavedState && JSON.parse(this.lastSavedState)\n        });\n      }\n    }\n  }\n\n  private stateToJson(baseState: IAppState) {\n    return omit(baseState, \"loading\", \"menuState\", \"baton\", \"auth\", \"gameStateVersion\");\n  }\n\n  componentWillUnmount(): void {\n    if (this.batonTimeout) {\n      clearTimeout(this.batonTimeout)\n    }\n    if (this.tickInterval) {\n      clearInterval(this.tickInterval)\n    }\n    if (this.pollInterval) {\n      clearInterval(this.pollInterval)\n    }\n    if (this.automateInterval) {\n      clearInterval(this.automateInterval)\n    }\n  }\n\n  private get gameStateLocked() {\n    return this.state.baton && this.state.baton.userId !== this.myUserId && this.state.baton.timeout > Date.now();\n  }\n\n  private ensureParticipant() {\n    const myPlayer = this.myPlayer;\n    if (myPlayer === undefined) {\n      let players = this.state.players;\n      const unassignedPlayer = players.find((e) => e.userId === undefined);\n      if (unassignedPlayer) {\n        unassignedPlayer.userId = this.myUserId;\n      } else {\n        players.push({name: localStorage.getItem(PLAYER_NAME_KEY) || DEFAULT_PLAYER_NAME, words: []});\n        this.forcePushGameData = true;\n      }\n      this.setState({players});\n    }\n  }\n\n  public render() {\n    if (this.myPlayer === undefined) {\n      return <Alert><Alert.Heading>Loading</Alert.Heading><p>{this.state.loading}</p></Alert>;\n    }\n    const tileSet = getTileSet(this.state.options.tileSetName);\n    // const totalTiles = tileSet.tiles.map((tile) => tile.count).reduce((a, b) => a + b);\n    // const totalPoints = tileSet.tiles.map((tile) => tile.count * tile.points).reduce((a, b) => a + b);\n    let selectableLetters = Array(...this.state.board);\n    if (this.state.word.length > 0) {\n      selectableLetters = selectableLetters.filter((tile, index) => this.canSelect(index));\n    }\n    let canPlay = false;\n    let playLabel = \"Too Short\";\n    if (this.state.word.length > 2) {\n      canPlay = isWord(this.state.word);\n      const word = this.state.word.map((tile) => tile.letter).join(\"\");\n      let points = this.state.word.map(this.tilePoints).reduce((a, b) => (a || 0) + (b || 0));\n      let bonusPoints = this.state.word.map(this.bonusPoints).reduce((a, b) => (a || 0) + (b || 0)) || 0;\n      bonusPoints = bonusPoints + this.state.goals.map((goal) => goal.check(this.pendingMove) ? goal.points : 0).reduce((a, b) => a + b, 0);\n      points = (points || 0) + bonusPoints;\n      if (canPlay) {\n        if (this.state.smeared) {\n          playLabel = `Release to play '${word}' for ${points || \"no\"} points`;\n        } else {\n          playLabel = `Play '${word}' for ${points || \"no\"} points`;\n        }\n      } else {\n        playLabel = `'${word}' is not a word`;\n      }\n    }\n \n    // If the player was smearing, auto-play if possible. \n    // If the player was tapping letters or scooching, though, don't do anything.\n    let onDone: ((key: string) => void) | undefined;\n    if (this.state.smeared) {\n      if (canPlay) {\n        onDone = this.onPlay;\n      } else {\n        onDone = (id) => {\n          // TODO: this should probably be an option\n          // deselect everything if the smear ends on a selected tile and the word's invalid,\n          // otherwise leave state unchanged (as in the end of a scooch)\n          const i = this.state.word.findIndex((tile) => tile.id === id);\n          //console.log({ id, word: this.state.word, i });\n          if (i >= 0) {\n            this.setState({ word: [] });\n          }\n        };\n      }\n    } else {\n      onDone = undefined;\n    }\n\n    const scoredPlayers = this.state.players.map((player) => {\n      const score = playerScore(player);\n      return { score, ...player };\n    }).sort((a, b) => b.score - a.score);\n    let overHeader = <Alert.Heading>{scoredPlayers[0].name} Wins!</Alert.Heading>;\n    if (scoredPlayers.find((e) => e.score !== scoredPlayers[0].score) === undefined) {\n      overHeader = <Alert.Heading>It’s a tie!</Alert.Heading>;\n    }\n\n    const yourPoints = this.state.players[0].words.map((play) => play.type === \"play\" ? play.points + play.bonusPoints : 0).reduce((a, b) => a + b, 0);\n    //const yourTiles = this.state.players[0].words.map((play) => play.type === \"play\" ? play.word.length : 0).reduce((a, b) => a + b, 0);\n    //const targetPoints = (yourTiles / totalTiles) * totalPoints;\n    const yourTargetPoints = this.state.players[0].words\n      .map((play) => play.type === \"play\" ? play.word : [])\n      .reduce((a, b) => a.concat(b), [])\n      .map((playedTile) => playedTile.letter)\n      .map((letter) => tileSet.tiles.find((e) => e.letter === letter)!.points)\n      .reduce((a, b) => a + b, 0) + this.state.players[0].words.length;\n    const stars = yourPoints - yourTargetPoints;\n    let starsString = \"\";\n    for (let i = 0; i < Math.abs(stars); ++i) {\n      starsString += \"★\";\n    }\n\n    const gameUrl = this.gameUrl;\n    return <Container fluid={true}>\n      {this.renderModal()}\n      <Row>\n        <Col className={compact([\"col-sm-12\", \"col-xl-6\", \"board-col\", this.state.over && \"over\"]).join(\" \")}>\n          <Row className=\"board-footer\">\n            <Col sm={4} className=\"sm-right\">\n              {this.state.players.length > 1\n                  ? <>\n                    {this.itIsMyTurn ? <b>Your Turn</b> : `${this.state.players[this.state.playerIndex].name}’s Turn`}\n                  </>\n                  : <>\n                    {gameUrl && this.state.players && this.state.players.length < 2 &&\n                    <Button variant={this.state.options.solo ? \"outline-primary\" : \"primary\"}\n                            onClick={() => this.changeOptions(() => ({solo: undefined}))}>Invite a Friend</Button>}\n                    {/* Solo Mode: {stars > 0 && \"+\"}{stars} */}\n                    <span className={`stars ${stars >= 0 ? \"positive\" : \"negative\"}`}>{starsString}</span>\n                    {/* Solo Mode: {yourPoints} / {yourTargetPoints} */}\n                  </>}\n            </Col>\n            <Col sm={4}>\n              <ButtonGroup>\n                <Button variant=\"success\"\n                        title={\"Open the Main Menu.\"}\n                        onClick={this.showMenu}>Menu</Button>\n              </ButtonGroup>\n            </Col>\n            <Col sm={4} className=\"sm-left\">\n              {this.state.bag.length} tiles left\n            </Col>\n          </Row>\n          <Row>\n            <div className=\"play-area\">\n              <Row><Button\n                  className={classNames(\"play-button\", canPlay && \"can-play\")}\n                  variant={canPlay ? \"primary\" : \"outline-primary\"}\n                  disabled={!canPlay}\n                  onClick={this.onPlay}\n              >{playLabel}</Button>\n              </Row>\n              {this.state.word.map((item, index) => (\n                  <div key={index} className=\"tile\">\n                    <div className=\"field\" style={{backgroundImage:`url(${tile})`, backgroundSize: 'contain', backgroundRepeat: 'no-repeat'}}>\n                      <div className=\"points\">{this.tilePoints(item) || <>&nbsp;</>}</div>\n                      <div className=\"letter\">{item.letter}</div>\n                      {this.bonusPoints(item) && <div className=\"bonus\">+{this.bonusPoints(item)}</div>}\n                    </div>\n                  </div>\n              ))}\n              {/* <div style={{marginTop: \"1rem\", textAlign: \"center\", border: \"1px solid black\"}}>★★★★★</div> */}\n              {this.state.word.length === 0 && <div className=\"tile space\"/>}\n              <div className=\"container\">\n                <div className=\"flex-grow\"/>\n              </div>\n            </div>\n          </Row>\n          <Row className=\"untouchable\">\n            {this.state.over &&\n            <div className=\"overlay\">\n              <Alert variant=\"success\" width=\"100%\">\n                {overHeader}\n                Final Score: {\n                scoredPlayers.map((player) => `${player.name}: ${player.score}`).join(\", \")\n              }\n              </Alert>\n            </div>}\n            {!this.itIsMyTurn &&\n            <div className=\"overlay\">\n              <Alert variant=\"info\" width=\"100%\">\n                <Alert.Heading>It’s {this.currentPlayer.name}’s Turn</Alert.Heading>\n                {this.gameStateLocked && <>Game state locked\n                  for {humanizeDuration(this.state.baton!.timeout - Date.now())}</>}\n              </Alert>\n            </div>}\n            {this.state.announcements &&\n            <div className=\"overlay\">\n              {this.state.announcements.map((a) =>\n                  <div key={a.key} className=\"announcement\"\n                       onAnimationEnd={() => this.setState((state) => ({announcements: without(state.announcements, a)}))}>\n                    <div className=\"title\">{a.title}</div>\n                    <div className=\"message\">{a.message}</div>\n                  </div>)}\n            </div>}\n            <SlideGrid\n                className=\"board\"\n                canExchange={this.canScooch}\n                tap={this.onClickItem}\n                done={onDone}\n                smear={this.onSmear}\n                exchange={this.onExchange}\n            >\n              {\n                this.state.board.map((item, index) => {\n                  const classes = [\"tile\"];\n                  if (this.state.word.includes(item)) {\n                    classes.push(\"selected\");\n                  }\n                  if (selectableLetters.indexOf(item) >= 0) {\n                    classes.push(\"selectable\");\n                  } else {\n                    classes.push(\"unselectable\");\n                  }\n                  if (this.canScooch(item.id)) {\n                    classes.push(\"swappable\");\n                  } else {\n                    classes.push(\"unswappable\");\n                  }\n                  if (item.type === \"space\") {\n                    classes.push(\"space\");\n                  }\n                  if (this.reordered(item)) {\n                    classes.push(\"reordered\");\n                  }\n                  if (this.state.options.oneScoochPerTurn && this.state.scooched === item.id) {\n                    classes.push(\"scooched\");\n                  }\n                  if ((index % 4) === 0) {\n                    classes.push(\"start-row\");\n                  }\n                  if (item.drop) {\n                    classes.push(`drop-${item.drop}`);\n                  }\n                  const id = item.id;\n                  return (\n                      <div className={classes.join(\" \")} key={id} id={id}>\n                        <div className=\"field\" style={{\n                          backgroundImage: `url(${tile})`,\n                          backgroundSize: 'contain',\n                          backgroundRepeat: 'no-repeat'\n                        }}>\n                          <div className=\"points\">{this.tilePoints(item) || <>&nbsp;</>}</div>\n                          <div className=\"letter\">{item.letter || <>&nbsp;</>}</div>\n                        </div>\n                      </div>\n                  );\n                })\n              }\n            </SlideGrid>\n          </Row>\n\n          <GoalListComponent mode={\"horizontal\"} goals={this.state.goals} pendingMove={this.pendingMove} canPlay={canPlay} board={this.state.board}/>\n        </Col>\n        <Col>\n          <Row className=\"players\">\n            {this.state.players.map((player, playerIndex) => {\n              const isCurrentPlayer = this.state.playerIndex === playerIndex;\n              return <Col key={`player-${playerIndex}`} md={6}\n                          className={compact([\"player\", isCurrentPlayer && \"current\"]).join(\" \")}>\n                <Row className=\"header\">\n                  <Col md={7} className=\"name\">\n                    <input type=\"text\" value={player.name} onChange={(event) => {\n                      player.name = event.target.value;\n                      this.setState((state) => {\n                        const players = Array(...state.players);\n                        return {players};\n                      });\n                    }}/>\n                  </Col>\n                  <Col md={2} className=\"score\">{playerScore(player)}</Col>\n                  <Col md={1}>{isCurrentPlayer && <div className=\"turn-indicator\"/>}</Col>\n                </Row>\n                <div>\n                  <Form.Check type=\"checkbox\" label=\"Automated\" checked={!!player.automated} onChange={(event: any) => {\n                    player.automated = event.target.checked;\n                    this.setState((state) => {\n                      const players = Array(...state.players);\n                      return {players};\n                    });\n                  }}/>\n                </div>\n                <div>\n                  {player.userId}\n                </div>\n                <div className=\"moves\">\n                  {player.words.map((play, index) => {\n                    let wordContent: any = <Badge pill={true} variant={MOVE_VARIANTS[play.type]}>{play.type}</Badge>;\n                    if (play.type === \"play\") {\n                      wordContent = <>{play.word.map((tile) => <div key={tile.id} className=\"tile\">\n                        <div className=\"field\" style={{backgroundImage:`url(${tile})`, backgroundSize: 'contain', backgroundRepeat: 'no-repeat'}}>\n                          <div className=\"points\">{tile.points || <>&nbsp;</>}</div>\n                          <div className=\"letter\">{tile.letter}</div>\n                        </div>\n                      </div>)}\n                        {play.goals.map((goal, index) => <div className=\"bonus\" key={index}>{goal.type}</div>)}\n                        {play.bonusPoints ? <div className=\"bonus\">+{play.bonusPoints}</div> : \"\"}\n                      </>;\n                    }\n                    return <Row key={index}><Col md={8}>{wordContent}</Col>\n                      <Col md={1}\n                           className=\"score\">{play.type === \"play\" && (play.points + play.bonusPoints)}</Col></Row>\n                  })}\n                </div>\n              </Col>\n            })}\n          </Row>\n\n          <Container className=\"mt-2\">\n            <ButtonGroup>\n              <Button variant=\"secondary\" onClick={() => this.setState((state) => {\n                const players = Array(...state.players);\n                players.pop();\n                return {players};\n              })}>-</Button>\n              <Button variant=\"outline-secondary\" disabled={true}>Players</Button>\n              <Button variant=\"secondary\" onClick={() => this.setState((state) => {\n                const players = Array(...state.players);\n                players.push({\n                  name: `Player ${players.length + 1}`,\n                  words: [],\n                });\n                return {players};\n              })}>+</Button>\n            </ButtonGroup>\n            <div className=\"flex-fill\"/>\n            <ButtonGroup>\n              <Button variant=\"outline-success\" onClick={() => {\n                const url = jsonToUrl(\"game.json\", this.state);\n                window.open(url, \"_blank\");\n              }}>Save Game</Button>\n              <Button variant=\"outline-danger\"\n                      onClick={() => this.setState(newGame(undefined, this.state.options.tileSetName))}>New\n                Game</Button>\n              <Button variant=\"outline-danger\"\n                      onClick={() => this.setState(newGame(this.state.players, this.state.options.tileSetName))}>with\n                Same Players</Button>\n            </ButtonGroup>\n          </Container>\n\n          <Row>\n            <Col>\n              <hr/>\n            </Col>\n          </Row>\n\n          <RulesComponent tileSet={this.tileSet} bag={this.state.bag} options={this.state.options}\n                          changeOptions={this.changeOptions} resetOptions={this.resetOptions}/>\n\n          <Row>\n            <Col>\n              <hr/>\n            </Col>\n          </Row>\n\n          <Row>\n            <Col>\n              <dl>\n                <dt>Status</dt>\n                <dd>{this.state.loading}</dd>\n                <dt>Game Data gameStateVersion</dt>\n                <dd>{`${this.state.gameStateVersion}`}</dd>\n              </dl>\n            </Col>\n          </Row>\n\n        </Col>\n      </Row>\n    </Container>;\n  }\n\n  private renderModal() {\n    const {menuState, options, players} = this.state;\n    const {gameUrl, myPlayer} = this;\n    const qrDialog = players && players.length < 2 && options.solo === undefined;\n    if (qrDialog && gameUrl && myPlayer) {\n      return this.renderQrDialog(gameUrl, myPlayer);\n    }\n    //console.log({menuState});\n    const mainMenu = menuState.open;\n    if (mainMenu) {\n      return this.renderMainMenu();\n    }\n    return false;\n  }\n\n  private renderQrDialog(gameUrl: string, player: IPlayer) {\n    return <InviteComponent\n        gameUrl={gameUrl} playerName={player.name}\n        changePlayerName={(value) => {\n          player.name = value;\n          this.setState((state) => {\n            const players = Array(...state.players);\n            return {players};\n          });\n        }}\n        dismiss={() => this.changeOptions(() => ({solo: true}))}\n        play={() => this.changeOptions(() => ({solo: false}))}\n    />;\n  }\n\n  private renderMainMenu() {\n    const passWillResign = this.state.passers.includes(this.state.playerIndex);\n\n    return <MainMenuComponent\n        show={!!this.state.menuState.open} hide={this.hideMenu}\n\n        canPass={!this.state.over}\n        passWillEndGame={passWillResign}\n        pass={this.onPass}\n\n        canReset={this.state.reordered.length !== 0 || this.state.word.length !== 0}\n        reset={this.onReset}\n\n        {...this.canNuke()}\n        nuke={this.onNuke}\n    />;\n  }\n\n  private get gameUrl() {\n    if (this.state.gameId === undefined) {\n      return undefined;\n    }\n    return `${window.location.toString().split(\"?\").shift()}?gameId=${this.state.gameId}`;\n  }\n\n  private get pendingMove(): IPlay {\n    return {\n      type: \"play\",\n      word: this.state.word.map((tile) => ({...tile, points: this.state.reordered.includes(tile) ? 0 : tile.points})),\n      points: 0,\n      bonusPoints: 0,\n      goals: []\n    };\n  }\n\n  private onExchange = (a: string, b: string) => {\n    this.setState((state) => {\n      const aIndex = state.board.findIndex((e) => e.id === a);\n      const bIndex = state.board.findIndex((e) => e.id === b);\n      const board: ITile[] = [];\n      const reordered: ITile[] = Array(...state.reordered);\n      state.board.forEach((tile, index) => {\n        let newIndex = index;\n        if (index === aIndex) {\n          newIndex = bIndex;\n        }\n        else if (index === bIndex) {\n          newIndex = aIndex;\n        }\n        if (newIndex !== index && !reordered.includes(tile)) {\n          reordered.push(tile);\n        }\n        board[newIndex] = tile;\n      });\n      return { board, reordered, scooched: a };\n    });\n  }\n\n  private canNuke() {\n    const usedNuke = this.state.nukers.includes(this.state.playerIndex);\n    const noMoreTiles = this.state.bag.length === 0;\n    const canNuke = !usedNuke && !noMoreTiles;\n    return { usedNuke, noMoreTiles, canNuke };\n  }\n\n  private get tileSet() {\n    return getTileSet(this.state.options.tileSetName);\n  }\n\n  private changeOptions = (change: (options: IScoochOptions) => IScoochOptions) => {\n    this.setState((state) => ({options: change(state.options)}));\n  }\n\n  private resetOptions = () => {\n    this.setState({options: DEFAULT_OPTIONS});\n  }\n\n  private canSelect = (index: number) => {\n    if (this.state.word.length === 0) {\n      return true;\n    }\n    const seedTile = this.state.word[this.state.word.length - 1];\n    const seed = this.state.board.findIndex((tile) => tile === seedTile);\n    const indexRow = Math.floor(index / 4);\n    const seedRow = Math.floor(seed / 4);\n    if (indexRow === seedRow) {\n      return Math.abs(index - seed) === 1;\n    } else {\n      if (Math.abs(indexRow - seedRow) === 1) {\n        return Math.abs(index % 4 - seed % 4) <= 1;\n      }\n      return false;\n    }\n  }\n\n  private getTile(key: string) {\n    return this.state.board.find((e) => e.id === key);// || this.state.bag.find((e) => e.id === key);\n  }\n\n  private getIndex(key: string) {\n    return this.state.board.findIndex((e) => e.id === key);// || this.state.bag.find((e) => e.id === key);\n  }\n\n  private canScooch = (keyA: string, keyB?: string) => {\n    if (this.state.options.oneScoochPerTurn && this.state.scooched && ![keyA, keyB].includes(this.state.scooched)) {\n      return false;\n    }\n    const a = this.getIndex(keyA);\n    if (a < 0 || this.state.word.indexOf(this.state.board[a]) >= 0) {\n      return false;\n    }\n    if (this.state.board[a].type !== \"letter\") {\n      return false;\n    }\n    if (!keyB) {\n      return true;\n    }\n    const b = this.getIndex(keyB);\n    if (b < 0 || this.state.word.indexOf(this.state.board[b]) >= 0) {\n      return false;\n    }\n    if (this.state.board[b].type !== \"letter\") {\n      return false;\n    }\n    const indexRow = Math.floor(b / 4);\n    const seedRow = Math.floor(a / 4);\n    if (indexRow === seedRow) {\n      return Math.abs(b - a) === 1;\n    } else {\n      if (Math.abs(indexRow - seedRow) === 1) {\n        return b % 4 === a % 4;\n      }\n      return false;\n    }\n  }\n\n  private tick = () => {\n    if (this.myPlayer === undefined) { return; }\n    for (let i = this.state.board.length - 1; i >= 0; i--) {\n      const space = this.state.board[i];\n      if (space.type === \"drop\") {\n        this.setState((state) => {\n          const board = Array(...state.board);\n          const bag = Array(...state.bag);\n          i = board.indexOf(space);\n          if (i >= 0) {\n            if (state.bag.length > 0) {\n              const j = Math.floor(Math.random() * state.bag.length);\n              board[i] = bag.splice(j, 1)[0];\n              this.drop(board[i], space.drop);\n            } else {\n              board[i].type = \"space\";\n            }\n          }\n          return { bag, board, original: Array(...board) };\n        });\n        break;\n      }\n    }\n    if (this.pendingDrops.length === 0 && this.clearDrops.length > 0) {\n      while (this.clearDrops.length > 0) {\n        this.clearDrops.pop()!.drop = 0;\n      }\n      console.warn(\"tickForceUpdate\");\n      this.forceUpdate();\n      return;\n    }\n  }\n\n  private automate = () => {\n    if (this.myPlayer === undefined) { return; }\n    const { goals } = this.state;\n    if (goals.length < 3) {\n      const availableLetters = compact([...this.state.bag.map((e) => e.letter), ...this.state.board.map((e) => e.letter)]);\n      switch (Math.floor(Math.random() * 6)) {\n        case 0:\n          goals.push(new CheapskateGoal());\n          break;\n        case 1:\n          goals.push(new VerbGoal());\n          break;\n        case 2:\n          goals.push(new VerbPastGoal());\n          break;\n        case 3:\n          goals.push(new DoublesGoal(sample(\"RSTLNE\")!));\n          break;\n        case 4:\n          if (availableLetters.length > 0) {\n            goals.push(new StartsWithGoal(sample(availableLetters)!));\n          }\n          break;\n        case 5:\n          goals.push(new LengthGoal(sample([3, 4])!));\n          break;\n      }\n      this.setState({ goals: uniqBy(goals, JSON.stringify) });\n      return;\n    }\n\n    const automation = this.automation.shift();\n    if (automation) {\n      switch (automation.type) {\n        case \"tap\":\n          this.onClickItem(automation.a, false);\n          return;\n        case \"wait\":\n          return;\n        case \"nuke\":\n          this.onNuke();\n          return;\n        case \"pass\":\n          this.onPass();\n          return;\n        case \"submit\":\n          this.onPlay();\n          return;\n        default:\n          console.error({ automation });\n          return;\n      }\n    }\n\n    const {board, players, playerIndex} = this.state;\n    const { canNuke } = this.canNuke();\n    const currentPlayer = players[playerIndex];\n    if (currentPlayer.automated) {\n      if (!board.some((t)=>t.type === \"drop\")) {\n        const possibilities: Array<[number, ITile[]]> = [];\n        new WordFinder(board, 4, (word) => {\n          if (word.length >= 3) {\n            const points: number = word.map((e) => e.points).reduce((a, b) => a + b, 0);\n            possibilities.push([points, word]);\n          }\n        }).findWords();\n        possibilities.sort((a, b) => a[0] - b[0]);\n        const play = possibilities.pop();\n        //console.log({possibilities});\n        if (play !== undefined) {\n          this.automation = play[1].map((e) => ({\n            type: \"tap\",\n            a: e.id,\n          }));\n          this.automation.push({type: \"wait\"});\n          this.automation.push({type: \"submit\"})\n        } else if (canNuke) {\n          this.automation.push({type: \"nuke\"});\n        } else {\n          this.automation.push({type: \"pass\"});\n        }\n      }\n    }\n  }\n\n  private reordered = (tile: ITile) => {\n    return this.state.reordered.includes(tile);\n  }\n\n  private tilePoints = (tile: ITile): number | undefined => {\n    if (this.reordered(tile)) {\n      return undefined;\n    }\n    return tile.points;\n  }\n\n  private bonusPoints = (tile: ITile): number | undefined => {\n    if (!this.state.options.bonusForLongerWords) {\n      return undefined;\n    }\n    const index = this.state.word.indexOf(tile);\n    if (this.state.options.bonusForLongerWords === \"constant\") {\n      if (index < 4) {\n        return undefined;\n      }\n      return 1;\n    }\n    if (index < 3) {\n      return undefined;\n    }\n    return index - 2;\n  }\n\n  private tileSelected = (tile: ITile, word?: ITile[]) => {\n    if (word === undefined) {\n      word = this.state.word;\n    }\n    return word.includes(tile);\n  }\n\n  private onSmear = (key: string) => {\n    const id = key;\n    const tile = this.state.board.find((tile) => tile.id.toString() === id);\n    if (tile) {\n      const index = this.state.board.indexOf(tile);\n      if (!this.tileSelected(tile)) {\n        if (this.canSelect(index)) {\n          this.onClickItem(key, true);\n        }\n      } else {\n        const preserveIndex = this.state.word.indexOf(tile);\n        const tileToDeselect = this.state.word[preserveIndex + 1];\n        if (tileToDeselect) {\n          this.onClickItem(tileToDeselect.id, true);\n        }\n      }\n    }\n  }\n  \n  private onClickItem = (key: string, smeared: boolean = false) => {\n    const id = key;\n    const tile = this.state.board.find((tile) => tile.id.toString() === id);\n    if (tile) {\n      const index = this.state.board.indexOf(tile);\n      if (this.tileSelected(tile) || this.canSelect(index)) {\n        this.setState((state) => {\n          const word = Array(...state.word);\n          if (this.tileSelected(tile, word)) {\n            while (this.tileSelected(tile, word)) {\n              word.pop();\n            }\n          } else {\n            word.push(tile);\n          }\n          return { word, smeared };\n        });\n      }\n    }\n  }\n\n  private showMenu = () => {\n    this.setState((state) => ({menuState: {...state.menuState, open: true}}));\n  }\n\n  private hideMenu = () => {\n    this.setState((state) => ({menuState: {...state.menuState, open: false}}));\n  }\n\n  private onReset = () => {\n    this.setState((state) => {\n      return { word: [], board: state.original, reordered: [], scooched: undefined };\n    });\n  }\n\n  private onNuke = () => {\n    this.setState((state) => {\n      const board: ITile[] = [];\n      for (let j = 0; j < 16; j++) {\n        board.push({\n          type: \"drop\",\n          id: `blank-${j}`,\n        } as ITile)\n      }\n      const bag: ITile[] = Array(...state.bag);\n      state.board.forEach((tile) => {\n        if (tile.type === \"letter\") {\n          bag.push(tile);\n        }\n      });\n      const playerIndex = state.playerIndex;\n      const nukers = Array(...state.nukers);\n      nukers.push(playerIndex);\n      const players = Array(...state.players);\n      players[playerIndex].words.push({ type: \"nuke\" });\n      return { nukers, bag, board, scooched: undefined };\n    })\n  }\n\n  private onPass = () => {\n    this.setState((state) => {\n      let playerIndex = state.playerIndex;\n      const passers = Array(...state.passers);\n      if (passers.includes(playerIndex)) {\n        return { ...state, word: [], board: state.original, reordered: [], over: true };\n      } else {\n        passers.push(playerIndex);\n        const players = Array(...state.players);\n        players[playerIndex].words.push({ type: \"pass\" });\n        playerIndex = (playerIndex + 1) % state.players.length;\n        return { ...state, word: [], board: state.original, reordered: [], playerIndex, passers, scooched: undefined };\n      }\n    });\n  }\n\n  private onPlay = () => {\n    this.setState((state) => {\n      const board = Array(...state.board);\n      const word = Array(...state.word);\n      const playedWord: IPlayedTile[] = [];\n      let points = 0;\n      let bonusPoints = 0;\n      while (word.length > 0) {\n        const tile = word.pop()!;\n        const letter = tile.letter;\n        const tilePoints = this.tilePoints(tile);\n        const tileBonusPoints = this.bonusPoints(tile);\n        playedWord.unshift({ id: tile.id, letter, points: tilePoints, bonusPoints: tileBonusPoints });\n        points += (tilePoints || 0);\n        bonusPoints += (tileBonusPoints || 0);\n        let seed = board.indexOf(tile);\n        const drops: ITile[] = [];\n        while (seed >= 0) {\n          const drop = seed - 4;\n          if (drop >= 0) {\n            board[seed] = board[drop];\n            board[seed].drop++;\n          } else {\n            board[seed] = { type: \"drop\", id: `dropping-${tile.id}`, drop: board[seed].drop + 1 } as ITile;\n          }\n          drops.push(board[seed]);\n          seed = drop;\n        }\n        drops.forEach((tile) => this.drop(tile, tile.drop));\n      }\n      const players = Array(...state.players);\n      const player = players[state.playerIndex];\n      const playMove: IPlay = {\n        type: \"play\",\n        word: playedWord,\n        points,\n        bonusPoints,\n        goals: [],\n      };\n      player.words.push(playMove);\n      this.state.goals.forEach((goal) => {\n        if (goal.check(playMove)) {\n          this.announceGoal(goal);\n          playMove.goals.push(goal);\n          playMove.bonusPoints += goal.points;\n        }\n      });\n      const goals = without(this.state.goals, ...playMove.goals);\n      const playerIndex = (state.playerIndex + 1) % players.length;\n      return { board, word, players, playerIndex, original: Array(...board), reordered: [], passers: [], scooched: undefined, goals };\n    })\n  }\n\n  private pendingDrops: ITile[] = [];\n  private clearDrops: ITile[] = [];\n\n  private announceGoal(goal: IGoal) {\n    this.announce(`${goal.type} +${goal.points}`, goal.description);\n  }\n\n  private drop(tile: ITile, distance: number) {\n    this.pendingDrops.push(tile);\n    tile.drop = distance;\n    setTimeout(() => {\n      const i = this.pendingDrops.indexOf(tile);\n      this.pendingDrops.splice(i, 1)\n      this.clearDrops.push(tile);\n    }, tile.drop * 1000);\n  }\n\n  private announce(title: string, message: string) {\n    this.setState((state) => {\n      const {announcements} = state;\n      announcements.push({title, message, key: ++UID});\n      return {announcements};\n    })\n  }\n}\n\nexport default App;\n","import Modal from \"react-bootstrap/Modal\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Figure from \"react-bootstrap/Figure\";\nimport QRCode from \"qrcode.react\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport React from \"react\";\nimport \"InviteComponent.css\";\nimport {phone} from \"./Globals\";\nimport {DEFAULT_PLAYER_NAME} from \"./App\";\n\ninterface IInviteComponentProps {\n    gameUrl: string;\n    playerName: string;\n\n    changePlayerName(value: string): void;\n\n    play(): void;\n\n    dismiss(): void;\n}\n\nexport default class InviteComponent extends React.Component<IInviteComponentProps> {\n    public render() {\n        const {gameUrl, playerName, changePlayerName, play, dismiss} = this.props;\n        return <Modal className={\"invite\"} backdrop={\"static\"} show={true} onHide={dismiss} scrollable={false}>\n            {\n                phone()\n                    ? <div className={\"top-spacer\"}/>\n                    : <Modal.Header closeButton={true}>\n                        <Modal.Title>\n                            Invite a Friend!\n                        </Modal.Title>\n                    </Modal.Header>\n            }\n            <Modal.Body>\n                <p>\n                    {phone() ? \"Have a friend\" : \"Have them\"} open their camera and point at this QR code.\n                    <br/>\n                    They'll join you automatically!\n                </p>\n                <Row>\n                    <Col className=\"flex-grow\"/>\n                    <Col>\n                        <Figure>\n                            <div className={\"qr\"}>\n                                <QRCode size={600} value={gameUrl}/>\n                            </div>\n                            {!phone() && <Figure.Caption>\n                                You can also copy and send them this URL:<br/>\n                                <a href={gameUrl} target=\"_blank\" rel=\"noopener noreferrer\">{gameUrl}</a>\n                            </Figure.Caption>}\n                        </Figure>\n                    </Col>\n                    <Col className=\"flex-grow\"/>\n                </Row>\n                <Row>\n                    {phone() && <Col className=\"flex-grow\"/>}\n                    <Col>\n                        <Form.Group>\n                            {!phone() && <Form.Label>Your Name</Form.Label>}\n                            <Form.Control type=\"input\" placeholder=\"Your Name\"\n                                          value={playerName === DEFAULT_PLAYER_NAME ? undefined : playerName}\n                                          onChange={changeNameThunk}/>\n                        </Form.Group>\n                    </Col>\n                    {phone() && <Col className=\"flex-grow\"/>}\n                </Row>\n            </Modal.Body>\n            {phone()\n                ? <>\n                    <Row>\n                        <Col className=\"flex-grow\"/>\n                        <Col xs={4}>\n                            <Row>\n                                <Button variant=\"success\" onClick={play} style={{width: \"100%\"}}>Play</Button>\n                            </Row>\n                        </Col>\n                        <Col className=\"flex-grow\"/>\n                    </Row>\n                    <Row>&nbsp;</Row>\n                    <Row className=\"practice\">\n                        <Col className=\"flex-grow\"/>\n                        <a onClick={dismiss}>Just Practice for Now</a>\n                        <Col className=\"flex-grow\"/>\n                    </Row>\n                </>\n                : <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={dismiss}>Solo</Button>\n                    <Button variant=\"primary\" onClick={play}>Play</Button>\n                </Modal.Footer>\n            }\n        </Modal>;\n\n        function changeNameThunk(event: any) {\n            changePlayerName(event.target.value)\n        }\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './dialogs.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}