{"version":3,"sources":["zynga.svg","chat.png","menu.png","pass.png","nuke.png","reset.png","tile.svg","GoalComponent.tsx","GoalListComponent.tsx","Goals.ts","classNames.ts","FooterComponent.tsx","Globals.ts","InviteComponent.tsx","isWord.tsx","App.tsx","MenuItemComponent.tsx","MainMenuComponent.tsx","TileDefinitions.tsx","WordFinder.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","GoalComponent","_React$PureComponent","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","props","mode","renderVertical","renderHorizontal","react_default","a","createElement","Row_default","id","className","Col_default","md","Badge_default","variant","goal","type","description","pill","points","xs","React","PureComponent","GoalListComponent","_this$props","goals","move","pendingMove","canPlay","board","Card_default","Header","Body","map","index","possible","classNames","check","compact","join","GoalComponent_GoalComponent","_this$props2","Fragment","Goal","letters","t","letter","possibleWithBoard","word","checkWord","VerbGoal","_Goal","_getPrototypeOf2","_this","_len","length","args","Array","_key","call","concat","includes","endsWith","json","VerbPastGoal","_Goal2","_getPrototypeOf3","_this2","_len3","_key3","DoublesGoal","_Goal3","_this3","get","split","StartsWithGoal","_Goal4","_this4","startsWith","CheapskateGoal","filter","e","some","LengthGoal","classes","ImageWithDisabledState","disabled","objectSpread","onClick","undefined","react","Image_default","FooterComponent","menu","canReset","reset","play","playLabel","canPass","passWillEndGame","pass","usedNuke","noMoreTiles","nuke","nukeTitle","Button_default","src","menuIcon","passIcon","nukeIcon","title","resetIcon","chatIcon","phone","window","innerWidth","InviteComponent","gameUrl","playerName","changePlayerName","dismiss","Modal_default","backdrop","show","onHide","scrollable","closeButton","Title","Figure_default","lib_default","size","Caption","href","target","rel","Form_default","Group","Label","Control","placeholder","DEFAULT_PLAYER_NAME","onChange","event","style","width","Footer","Component","TRIE","require","find","forEach","tile","toLocaleLowerCase","MoveTypes","MenuItemComponent","icon","badge","onClickDisabled","Image","MainMenuComponent","hide","MenuItemComponent_MenuItemComponent","Error","TileDefinition","_class","initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","count","applyDecoratedDescriptor","prototype","observable","configurable","enumerable","writable","initializer","TileDefinitions","_class3","TileSet","name","tiles","_descriptor4","_descriptor5","WordFinder","onWordFound","y","x","seed","search","pos","result","push","adjacent","info","prefix","next","getOwnPropertyNames","validIndex","indexOf","valid","splice","getPrefixInfo","adjacentFree","nextPos","nextTile","toLowerCase","toConsumableArray","DEFAULT_OPTIONS","oneScoochPerTurn","bonusForLongerWords","UID","playerScore","player","words","i","bonusPoints","reduce","b","getTileSet","tileSetName","TileSets","APP_ID","App","_React$Component","automation","loadGameId","forcePushGameData","batonTimeout","tickInterval","pollInterval","automateInterval","pushImmediate","auth","lastSavedState","pendingDrops","clearDrops","showInvite","changeOptions","solo","getToken","password","deviceIdentifier","userId","authUserId","setState","loading","fetch","method","body","JSON","stringify","appId","headers","Content-Type","then","response","status","console","error","statusText","token","onAuthenticated","catch","localStorage","setItem","setInterval","poll","automate","gameId","pullGameData","state","updateProhibited","gameStateLocked","newBaton","myUserId","timeout","Date","now","boardStateSource","stateToJson","boardState","needsPush","diff","parse","warn","stateChangesWhileNotMyTurn","baton","gameStateVersion","Authorization","accessType","sessionStorage","meta","onExchange","aIndex","findIndex","bIndex","reordered","newIndex","scooched","change","options","resetOptions","canSelect","seedTile","indexRow","Math","floor","seedRow","abs","canScooch","keyA","keyB","getIndex","tick","myPlayer","_loop3","_i","space","bag","j","random","drop","original","pop","forceUpdate","availableLetters","sample","uniqBy","shift","onClickItem","onNuke","onPass","onPlay","_this$state","players","playerIndex","canNuke","automated","possibilities","findWords","sort","tilePoints","tileSelected","onSmear","toString","preserveIndex","tileToDeselect","smeared","showMenu","menuState","open","hideMenu","onReset","nukers","passers","over","playedWord","tileBonusPoints","unshift","drops","playMove","announceGoal","without","getItem","tileSet","data","uuid","announcements","newGame","currentPlayer","zid","location","_loop","_loop2","hydrateGoals","fromJson","query","queryString","prevProps","prevState","ensureParticipant","clearTimeout","setTimeout","history","pushState","path","clearInterval","_this5","Alert_default","Heading","selectableLetters","onDone","isWord","scoredPlayers","score","overHeader","stars","playedTile","renderPlayers","renderModal","item","backgroundImage","backgroundSize","backgroundRepeat","onAnimationEnd","message","SlideGrid","canExchange","tap","done","smear","exchange","GoalListComponent_GoalListComponent","FooterComponent_FooterComponent","assign","_this6","_response$meta","hydrateAppState","baseState","omit","unassignedPlayer","_this7","itIsMyTurn","lastWord","leftSide","image","zynga","roundedCircle","isMe","pointsWord","nameAndScore","_this$state2","renderQrDialog","renderMainMenu","_this8","InviteComponent_InviteComponent","passWillResign","MainMenuComponent_MainMenuComponent","announce","distance","_this9","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0be7f227.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/zynga.ffedddac.svg\";","module.exports = __webpack_public_path__ + \"static/media/chat.444284b3.png\";","module.exports = __webpack_public_path__ + \"static/media/menu.40ced8e4.png\";","module.exports = __webpack_public_path__ + \"static/media/pass.90b205d7.png\";","module.exports = __webpack_public_path__ + \"static/media/nuke.fddd726e.png\";","module.exports = __webpack_public_path__ + \"static/media/reset.c5fdbe05.png\";","module.exports = __webpack_public_path__ + \"static/media/tile.e1eb2eab.svg\";","import {IGoal} from 'Goals';\nimport React from 'react';\nimport Badge from 'react-bootstrap/Badge';\nimport Col from 'react-bootstrap/Col';\nimport Image from 'react-bootstrap/Image';\nimport Row from 'react-bootstrap/Row';\nimport \"Goals.css\";\nimport tile from \"tile.svg\";\n\nexport class GoalComponent extends React.PureComponent<{\n    mode: \"vertical\" | \"horizontal\",\n    goal: IGoal,\n    id: number,\n    className: string,\n}> {\n    public render() {\n        switch (this.props.mode) {\n            case \"vertical\":\n                return this.renderVertical();\n            case \"horizontal\":\n                return this.renderHorizontal();\n        }\n    }\n\n    private renderVertical() {\n        return (\n            <Row key={this.props.id} className={this.props.className}>\n                <Col md={10}>\n                    <Badge variant=\"warning\">{this.props.goal.type}</Badge>\n                    <br/>\n                    {this.props.goal.description}\n                </Col>\n                <Col md={2}>\n                    <Badge variant=\"success\" pill={true}>\n                        +{this.props.goal.points}\n                    </Badge>\n                </Col>\n            </Row>\n        );\n    }\n    private renderHorizontal() {\n        return (\n            <Col key={this.props.id} className={this.props.className} xs={4}>\n                <div>\n                <Row>\n                    <div className=\"bonus-circle\">\n                        +{this.props.goal.points}\n                    </div>\n                </Row>\n                <Row>\n                <Col className=\"flex-grow\">\n                        {this.props.goal.description}\n                    </Col>\n                </Row>\n                </div>\n            </Col>\n        );\n    }\n}\n","import {ITile} from 'App';\nimport {GoalComponent} from 'GoalComponent';\nimport {IGoal} from 'Goals';\nimport compact from 'lodash/compact';\nimport {IPlay} from 'Move';\nimport React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nexport class GoalListComponent extends React.PureComponent<{\nmode: \"vertical\" | \"horizontal\",\n  goals: IGoal[];\n  pendingMove: IPlay;\n  board: ITile[];\n  canPlay: boolean;\n}> {\n    public render() {\n        switch (this.props.mode) {\n            case \"vertical\":\n                return this.renderVertical();\n            case \"horizontal\":\n                return this.renderHorizontal();\n        }\n    }\n\n    private renderVertical() {\n        const {goals, pendingMove: move, canPlay, board} = this.props;\n\n        return <Card>\n            <Card.Header>Goals</Card.Header>\n            <Card.Body>\n                {goals.map((goal, index) => {\n                    const possible = goal.possible(board);\n                    const thisMoveQualifies = canPlay && goal.check(move);\n                    const classNames = ['goal', thisMoveQualifies && 'qualifies', possible && 'possible'];\n                    const className = compact(classNames).join(' ')\n                    return <GoalComponent goal={goal} id={index} key={index} className={className}\n                                          mode={\"horizontal\"}/>;\n                })}\n            </Card.Body>\n        </Card>;\n    }\n\n    private renderHorizontal() {\n        const {goals, pendingMove: move, canPlay, board} = this.props;\n\n        return <><Row className=\"goals-header\">\n            <Col xs={1}/>\n            <Col className=\"hr flex-grow\"/>\n            <Col className=\"goals-title\" xs={\"auto\"}>Goals</Col>\n            <Col className=\"hr flex-grow\"/>\n            <Col xs={1}/>\n        </Row>\n        <Row className={\"goals-horizontal\"}>\n                {goals.map((goal, index) => {\n                    const possible = goal.possible(board);\n                    const thisMoveQualifies = canPlay && goal.check(move);\n                    const classNames = ['goal', thisMoveQualifies && 'qualifies', possible && 'possible'];\n                    const className = compact(classNames).join(' ')\n                    return <GoalComponent goal={goal} id={index} key={index} className={className}\n                                          mode={\"horizontal\"}/>;\n                })}\n        </Row></>;\n    }\n}\n","import { ITile } from './App';\nimport { IPlay } from \"./Move\";\n\ntype GoalType = 'Get Moving' | 'Over It' | 'Double Up' | 'Up Front' | 'Cheapskate' | 'Shortie';\n\nexport interface IGoal {\n    type: GoalType;\n    description: string;\n    points: number;\n    possible(board: ITile[]): boolean | \"maybe\";\n    check(move: IPlay): boolean;\n}\n\nabstract class Goal implements IGoal {\n    abstract type: GoalType;\n    abstract get description(): string;\n    abstract points: number;\n    possible(board: ITile[]) {\n        const letters = board.map((t) => t.letter).join(\"\");\n        return this.possibleWithBoard(letters);\n    }\n    check(move: IPlay): boolean {\n        const word = move.word.map((t) => t.letter).join(\"\");\n        return this.checkWord(word);\n    }\n    abstract possibleWithBoard(board: string): boolean;\n    abstract checkWord(word: string): boolean;\n}\n\nexport class VerbGoal extends Goal {\n    type = \"Get Moving\" as GoalType;\n    description = \"Play something ending in 'ing'\";\n    points = 10;\n    possibleWithBoard(board: string) {\n        return board.includes(\"I\") &&board.includes(\"N\") &&board.includes(\"G\");        \n    }\n    checkWord(word: string): boolean {\n        return word.endsWith(\"ING\");\n    }\n    public static fromJson(json: any) {\n        return new VerbGoal();\n    }\n}\n\nexport class VerbPastGoal extends Goal {\n    type = \"Over It\" as GoalType;\n    description = \"Play something ending in 'ed'\";\n    points = 8;\n    possibleWithBoard(board: string) {\n        return board.includes(\"E\") &&board.includes(\"D\");        \n    }\n    checkWord(word: string): boolean {\n        return word.endsWith(\"ED\");\n    }\n    public static fromJson(json: any) {\n        return new VerbPastGoal();\n    }\n}\n\nexport class DoublesGoal extends Goal {\n    type = \"Double Up\" as GoalType;\n    get description() { return `Play something with two '${this.letter}'s`; }\n    points = 7;\n    private readonly letter: string;\n    constructor(letter: string) {\n        super();\n        this.letter = letter;\n    }\n    possibleWithBoard(board: string) {\n        return board.split(this.letter).length >= 3;\n    }\n    checkWord(word: string): boolean {\n        return word.split(this.letter).length >= 3;\n    }\n    public static fromJson(json: any) {\n        return new DoublesGoal(json.letter);\n    }\n}\n\nexport class StartsWithGoal extends Goal {\n    type = \"Up Front\" as GoalType;\n    get description() { return `Play something that starts with '${this.letter}'`; }\n    points = 5;\n    private readonly letter: string;\n    constructor(letter: string) {\n        super();\n        this.letter = letter;\n    }\n    possibleWithBoard(board: string) {\n        return board.split(this.letter).length >= 2;\n    }\n    checkWord(word: string): boolean {\n        return word.startsWith(this.letter);\n    }\n    public static fromJson(json: any) {\n        return new StartsWithGoal(json.letter);\n    }\n}\n\nexport class CheapskateGoal implements IGoal {\n    possible(board: ITile[]) {\n        if (board.filter((e) => (e.points || 0) < 2).length >= 3) {\n            return \"maybe\";\n        }\n        return false;\n    }\n    check(move: IPlay): boolean {\n        return !move.word.some((t) => (t.points || 0) > 2);\n    }\n    type = \"Cheapskate\" as GoalType;\n    get description() { return `Only use tiles worth one or two points`; }\n    points = 10;\n    public static fromJson(json: any) {\n        return new CheapskateGoal();\n    }\n}\n\nexport class LengthGoal implements IGoal {\n    length: number;\n    constructor(length: number) {\n        this.length = length;\n    }\n    possible(board: ITile[]) {\n        return true;\n    }\n    check(move: IPlay): boolean {\n        return move.word.length === this.length;\n    }\n    type = \"Shortie\" as GoalType;\n    get description() { return `Play something ${this.length} letters long`; }\n    points = 10;\n    public static fromJson(json: any) {\n        return new LengthGoal(json.length);\n    }\n}\n","import compact from \"lodash/compact\";\n\nfunction classNames(...classes: Array<string | false | undefined>) {\n    classes = compact(classes);\n    if (classes.length === 0) {\n        return undefined;\n    }\n    return classes.join(\" \");\n}\n\nexport default classNames;\n","import \"Menus.css\";\nimport * as React from \"react\";\nimport Col from \"react-bootstrap/Col\";\nimport Image from \"react-bootstrap/Image\";\nimport Row from \"react-bootstrap/Row\";\n\nimport chatIcon from \"chat.png\";\nimport menuIcon from \"menu.png\";\nimport passIcon from \"pass.png\";\nimport nukeIcon from \"nuke.png\";\nimport resetIcon from \"reset.png\";\n\nimport \"Footer.css\";\nimport Button from \"react-bootstrap/Button\";\nimport classNames from \"./classNames\";\n\ninterface IFooterProps {\n    playLabel: string;\n\n    canReset: boolean;\n    usedNuke: boolean;\n    noMoreTiles: boolean;\n    canPlay: boolean;\n    canPass: boolean;\n    passWillEndGame: boolean;\n\n    menu(): void;\n\n    reset(): void;\n\n    nuke(): void;\n\n    play(): void;\n\n    pass(): void;\n}\n\nfunction ImageWithDisabledState(props: any & { disabled?: boolean }) {\n    if (props.disabled) {\n        props = {...props, onClick: undefined};\n    }\n    return <Row className={props.disabled ? \"disabled\" : undefined}><Image {...props}/></Row>;\n}\n\nexport default class FooterComponent extends React.Component<IFooterProps> {\n    public render() {\n        const {\n            menu,\n\n            canReset, reset,\n            canPlay, play, playLabel,\n            canPass, passWillEndGame, pass,\n\n            usedNuke, noMoreTiles, nuke,\n        } = this.props;\n\n        let nukeTitle = \"Discard all tiles and draw new ones. You may only do this once per game.\";\n        if (usedNuke) {\n            nukeTitle = \"You may only use the nuclear option once per game.\";\n        } else if (noMoreTiles) {\n            nukeTitle = \"It’s too late to use the nuclear option.\";\n        }\n\n        // const passInsteadOfPlay = !canPlay && passWillEndGame;\n        return <>\n            <Row className=\"footer-play-button\">\n                <Button\n                className={classNames(\"play-button\", canPlay && \"can-play\")}\n                variant={canPlay ? \"success\" : \"outline-success\"}\n                disabled={!canPlay}\n                onClick={play}\n            >\n                    {playLabel}\n                </Button>\n            </Row>\n\n            <Row className=\"footer\">\n            <Col xs={2}><ImageWithDisabledState src={menuIcon} onClick={menu}/></Col>\n            <Col xs={2}>{\n                (usedNuke || noMoreTiles)\n                    ? <ImageWithDisabledState src={passIcon} disabled={!canPass || passWillEndGame} onClick={pass}/>\n                    : <ImageWithDisabledState src={nukeIcon} title={nukeTitle} onClick={nuke}/>}\n            </Col>\n            <Col xs={4}>\n            {/*    <Button*/}\n            {/*    variant=\"success\"*/}\n            {/*    disabled={!canPlay && !passWillEndGame}*/}\n            {/*    onClick={passInsteadOfPlay ? pass : play}>{passInsteadOfPlay ? \"finish\" : \"play\"}*/}\n            {/*</Button>*/}\n            </Col>\n            <Col xs={2}><ImageWithDisabledState src={resetIcon} disabled={!canReset}\n                                                onClick={reset}/></Col>\n            <Col xs={2}><Image src={chatIcon}/></Col>\n        </Row>\n        </>;\n\n        // return <Modal className=\"main-menu\" show={show} onHide={hide} backdrop={true}>\n        //     <Modal.Body>\n        //         <MenuItemComponent\n        //             title={\"How to Play\"}\n        //             description={\"Getting started and rules of the game\"}\n        //             icon={tile}\n        //             disabled={true}\n        //             onClick={() => {throw new Error(\"Not Implemented\")}}\n        //         />\n        //\n        //         <MenuItemComponent\n        //             title={\"Dictionary\"}\n        //             description={\"Information about which words are acceptable\"}\n        //             icon={tile}\n        //             disabled={true}\n        //             onClick={() => {throw new Error(\"Not Implemented\")}}\n        //         />\n        //\n        //         <MenuItemComponent\n        //             title={\"Tile Distribution\"}\n        //             description={\"How many tiles there are of each letter and how many remain in the bag\"}\n        //             icon={tile}\n        //             disabled={true}\n        //             onClick={() => {throw new Error(\"Not Implemented\")}}\n        //         />\n        //\n        //         <MenuItemComponent\n        //             title={\"Reset\"}\n        //             description={\"Return tiles to their original positions, restoring their point values.\"}\n        //             icon={tile}\n        //             disabled={!canReset}\n        //             onClick={reset}\n        //         />\n        //\n        //         <MenuItemComponent\n        //             title={passWillEndGame ? \"Pass\" : \"Finish\"}\n        //             description={passWillEndGame ? \"Finish the game\" : \"No moves? Pass your turn\"}\n        //             icon={tile}\n        //             disabled={!canPass}\n        //             onClick={pass}\n        //         />\n        //\n        //         <MenuItemComponent\n        //             title={\"Nuke\"}\n        //             description={nukeTitle}\n        //             icon={tile}\n        //             badge={usedNuke ? 0 : 1}\n        //             disabled={usedNuke}\n        //             onClick={nuke}\n        //         />\n        //\n        //         <MenuItemComponent\n        //             title={\"Resign\"}\n        //             description={\"End this game, but it counts as a loss\"}\n        //             icon={tile}\n        //             disabled={true}\n        //             onClick={() => {throw new Error(\"Not Implemented\")}}\n        //         />\n        //     </Modal.Body>\n        // </Modal>;\n    }\n}\n","export function phone() {\n    return window.innerWidth < 576;\n}\n","import Modal from \"react-bootstrap/Modal\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Figure from \"react-bootstrap/Figure\";\nimport QRCode from \"qrcode.react\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport React from \"react\";\nimport \"InviteComponent.css\";\nimport {phone} from \"./Globals\";\nimport {DEFAULT_PLAYER_NAME} from \"./App\";\n\ninterface IInviteComponentProps {\n    gameUrl: string;\n    playerName: string;\n\n    changePlayerName(value: string): void;\n\n    play(): void;\n\n    dismiss(): void;\n}\n\nexport default class InviteComponent extends React.Component<IInviteComponentProps> {\n    public render() {\n        const {gameUrl, playerName, changePlayerName, play, dismiss} = this.props;\n        return <Modal className={\"invite\"} backdrop={\"static\"} show={true} onHide={dismiss} scrollable={false}>\n            {\n                phone()\n                    ? <div className={\"top-spacer\"}/>\n                    : <Modal.Header closeButton={true}>\n                        <Modal.Title>\n                            Invite a Friend!\n                        </Modal.Title>\n                    </Modal.Header>\n            }\n            <Modal.Body>\n                <p>\n                    {phone() ? \"Have a friend\" : \"Have them\"} open their camera and point at this QR code.\n                    <br/>\n                    They'll join you automatically!\n                </p>\n                <Row>\n                    <Col className=\"flex-grow\"/>\n                    <Col>\n                        <Figure>\n                            <div className={\"qr\"}>\n                                <QRCode size={600} value={gameUrl}/>\n                            </div>\n                            {!phone() && <Figure.Caption>\n                                You can also copy and send them this URL:<br/>\n                                <a href={gameUrl} target=\"_blank\" rel=\"noopener noreferrer\">{gameUrl}</a>\n                            </Figure.Caption>}\n                        </Figure>\n                    </Col>\n                    <Col className=\"flex-grow\"/>\n                </Row>\n                <Row>\n                    {phone() && <Col className=\"flex-grow\"/>}\n                    <Col>\n                        <Form.Group>\n                            {!phone() && <Form.Label>Your Name</Form.Label>}\n                            <Form.Control type=\"input\" placeholder=\"Your Name\"\n                                          value={playerName === DEFAULT_PLAYER_NAME ? undefined : playerName}\n                                          onChange={changeNameThunk}/>\n                        </Form.Group>\n                    </Col>\n                    {phone() && <Col className=\"flex-grow\"/>}\n                </Row>\n            </Modal.Body>\n            {phone()\n                ? <>\n                    <Row>\n                        <Col className=\"flex-grow\"/>\n                        <Col xs={4}>\n                            <Row>\n                                <Button variant=\"success\" onClick={play} style={{width: \"100%\"}}>Play</Button>\n                            </Row>\n                        </Col>\n                        <Col className=\"flex-grow\"/>\n                    </Row>\n                    <Row>&nbsp;</Row>\n                    <Row className=\"practice\">\n                        <Col className=\"flex-grow\"/>\n                        <a onClick={dismiss}>Just Practice for Now</a>\n                        <Col className=\"flex-grow\"/>\n                    </Row>\n                </>\n                : <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={dismiss}>Solo</Button>\n                    <Button variant=\"primary\" onClick={play}>Play</Button>\n                </Modal.Footer>\n            }\n        </Modal>;\n\n        function changeNameThunk(event: any) {\n            changePlayerName(event.target.value)\n        }\n    }\n}\n","export type TrieEntry = Trie | 1 | undefined;\nexport type Word = Array<{ letter: string }>;\n\ninterface Trie {\n  [key: string]: TrieEntry,\n}\n\nconst TRIE: Trie = require(\"./trie.json\");\n\nfunction find(word: Word) {\n  let t: TrieEntry = TRIE;\n  word.forEach((tile) => {\n    if (typeof t === \"object\") {\n      t = t[tile.letter.toLocaleLowerCase()];\n    }\n  });\n  return t;\n}\n\nexport default function isWord(word: Word) {\n  const t = find(word);\n  return typeof t === \"object\" && t[\"_\"] === 1;\n}\n\nexport function getPrefixInfo(prefix: Word) {\n  const t = find(prefix);\n  if (typeof t !== \"object\") {\n    return undefined;\n  }\n  const next = Object.getOwnPropertyNames(t);\n  const validIndex = next.indexOf(\"_\");\n  const valid = validIndex >= 0;\n  if (valid) {\n    next.splice(validIndex, 1);\n  }\n  if (next.length === 0) {\n    return true;\n  }\n  return { valid, next }\n}\n","import SlideGrid from \"@pyrogenic/slide-grid/lib/SlideGrid\";\nimport * as diff from \"deep-diff\";\nimport {GoalListComponent} from \"GoalListComponent\";\nimport {CheapskateGoal, DoublesGoal, IGoal, LengthGoal, StartsWithGoal, VerbGoal, VerbPastGoal} from \"Goals\";\nimport compact from \"lodash/compact\";\nimport omit from \"lodash/omit\";\nimport sample from \"lodash/sample\";\nimport uniqBy from \"lodash/uniqBy\";\nimport without from \"lodash/without\";\nimport * as queryString from \"querystring\";\nimport React from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Button from \"react-bootstrap/Button\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport Col from \"react-bootstrap/Col\";\nimport Image from \"react-bootstrap/Image\";\nimport Row from \"react-bootstrap/Row\";\nimport uuid from \"uuid/v4\";\nimport zynga from \"zynga.svg\";\nimport \"./App.css\";\nimport FooterComponent from \"./FooterComponent\";\nimport {phone} from \"./Globals\";\nimport InviteComponent from \"./InviteComponent\";\nimport IPlayer from \"./IPlayer\";\nimport isWord from \"./isWord\";\nimport MainMenuComponent from \"./MainMenuComponent\";\nimport {IPlay, IPlayedTile} from \"./Move\";\nimport tile from \"./tile.svg\";\nimport TileSets from \"./TileDefinitions\";\nimport WordFinder from \"./WordFinder\";\n\nconst PLAYER_NAME_KEY = \"PlayerName\";\n\nexport const DEFAULT_PLAYER_NAME = \"Anonymous\";\n\nexport interface ITile {\n    type: \"letter\" | \"space\" | \"drop\";\n    id: string;\n    letter: string;\n    points: number;\n    renderIndex?: number;\n    drop: number;\n}\n\nenum MoveTypes {\n    pass = \"pass\",\n    nuke = \"nuke\",\n    play = \"play\",\n}\n\ntype Variant = undefined\n    | \"primary\"\n    | \"secondary\"\n    | \"success\"\n    | \"danger\"\n    | \"warning\"\n    | \"info\"\n    | \"dark\"\n    | \"light\"\n    | \"link\"\n    | \"outline-primary\"\n    | \"outline-secondary\"\n    | \"outline-success\"\n    | \"outline-danger\"\n    | \"outline-warning\"\n    | \"outline-info\"\n    | \"outline-dark\"\n    | \"outline-light\";\n\ntype BadgeVariant = Exclude<Variant, \"link\"\n    | \"outline-primary\"\n    | \"outline-secondary\"\n    | \"outline-success\"\n    | \"outline-danger\"\n    | \"outline-warning\"\n    | \"outline-info\"\n    | \"outline-dark\"\n    | \"outline-light\">;\n\nconst MOVE_VARIANTS: { [P in MoveTypes]: BadgeVariant } = {\n    play: \"primary\",\n    nuke: \"warning\",\n    pass: \"secondary\",\n};\n\nexport interface IScoochOptions {\n    solo?: boolean;\n    oneScoochPerTurn?: boolean;\n    tileSetName?: string;\n    bonusForLongerWords?: false | \"constant\" | \"linear\";\n}\n\nconst DEFAULT_OPTIONS: IScoochOptions = {\n    oneScoochPerTurn: true,\n    bonusForLongerWords: \"linear\",\n};\n\ntype IAutomationAction = {\n    type: \"tap\", a: string,\n} | {\n    type: \"scooch\",\n    a: string,\n    b: string,\n} | {\n    type: \"submit\" | \"wait\" | \"nuke\" | \"pass\",\n};\n\nlet UID = 1;\n\ninterface IMenuState {\n    open?: boolean;\n}\n\ninterface IAnnouncement {\n    key: number;\n    title: string;\n    message: string;\n}\n\n/**\n * State held in the conversation meta and thus shared between players\n */\n// TODO: unflatten IAppState to make code and logic easier to follow.\ninterface ISharedState {\n    /**\n     * Represents a \"reservation\" of the right to change game state.  Mostly it was to help people put their names in\n     * when it isn't their turn at the beginning, but may not actually be necessary if the version field is properly\n     * respected (i.e. checked agains the local state after join but before edit).\n     */\n    baton?: {\n        userId: string,\n        timeout: number,\n    };\n\n    /**\n     * Same as the conversation id\n     */\n    gameId: string;\n\n    /**\n     * Optimistic concurrency version number for {gameState}\n     */\n    gameStateVersion: number;\n\n    // Would be part of this object if not flattened into {IAppState}\n    // gameState: IGameState,\n}\n\ninterface IGameState {\n    players: IPlayer[];\n    playerIndex: number;\n    nukers: number[];\n    passers: number[];\n    over: boolean;\n    announcements: IAnnouncement[];\n    options: IScoochOptions;\n    bag: ITile[];\n    board: ITile[];\n    original: ITile[];\n    word: ITile[];\n    reordered: ITile[];\n    scooched?: string;\n    smeared?: boolean;\n    goals: IGoal[];\n}\n\ninterface IAppState extends ISharedState, IGameState {\n    loading: string;\n    menuState: IMenuState;\n}\n\nfunction playerScore(player: IPlayer) {\n    return player.words.map((i) => i.type === \"play\" ? i.points + i.bonusPoints : 0).reduce((a, b) => (a + b), 0);\n}\n\nfunction getTileSet(tileSetName?: string) {\n    return TileSets.find((e) => e.name === tileSetName) || TileSets[0]!;\n}\n\nfunction newGame(players?: IPlayer[], tileSetName?: string): IAppState {\n    const board: ITile[] = [];\n    const bag: ITile[] = [];\n    let id = 0;\n    const tileSet = getTileSet(tileSetName);\n    tileSet.tiles.forEach((data) => {\n        for (let j = 0; j < data.count; j++) {\n            bag.push({\n                type: \"letter\",\n                id: `tile-${id++}`,\n                letter: data.letter,\n                points: data.points,\n                drop: 0,\n            });\n        }\n    });\n    for (let j = 0; j < 16; j++) {\n        board.push({\n            type: \"drop\",\n            id: `blank-${j}`,\n        } as ITile);\n    }\n    players = players || [];\n    players.forEach((player) => player.words = []);\n    const options = {...DEFAULT_OPTIONS, tileSetName: tileSet.name};\n    const gameId = uuid();\n    return {\n        menuState: {},\n        loading: \"bootstrap\",\n        gameStateVersion: 1,\n        gameId,\n        players,\n        playerIndex: 0,\n        bag,\n        board,\n        original: Array(...board),\n        word: [],\n        reordered: [],\n        nukers: [],\n        passers: [],\n        over: false,\n        options,\n        goals: [],\n        announcements: [],\n    };\n}\n\n// Cache of generated json data URLs\nconst JSON_TO_URL_DATA: { [key: string]: string } = {};\n\nfunction jsonToUrl(key: string, stuff: any) {\n    const data = new Blob([JSON.stringify(stuff)], {type: \"application/json\"});\n\n    // If we are replacing a previously generated file we need to\n    // manually revoke the object URL to avoid memory leaks.\n    if (JSON_TO_URL_DATA[key]) {\n        window.URL.revokeObjectURL(JSON_TO_URL_DATA[key]);\n    }\n\n    JSON_TO_URL_DATA[key] = window.URL.createObjectURL(data);\n\n    // returns a URL you can use as a href\n    return JSON_TO_URL_DATA[key];\n}\n\ninterface IAuth {\n    userId: string;\n    zid: string;\n    password: string;\n    token: string;\n}\n\nconst APP_ID = 5005139;\n\ninterface IQuery {\n    gameId?: string;\n}\n\nfunction getQuery() {\n    return queryString.parse(window.location.search.split(\"?\").pop() || \"\") as IQuery;\n}\n\nexport class App extends React.Component<{}, IAppState> {\n\n    private get deviceIdentifier() {\n        return localStorage.getItem(\"DeviceIdentifier\") || uuid();\n    }\n\n    private get authUserId() {\n        return localStorage.getItem(\"AuthUserId\") || undefined;\n    }\n\n    private get myPlayer() {\n        if (!this.state.players) {\n            return undefined;\n        }\n        return this.state.players.find((p) => p.userId === this.myUserId);\n    }\n\n    private get itIsMyTurn() {\n        const myUserId = this.myUserId;\n        if (!myUserId) {\n            return false;\n        }\n        const currentPlayerUserId = this.currentPlayer.userId;\n        const isMyTurn = currentPlayerUserId === myUserId;\n        return isMyTurn;\n    }\n\n    private get currentPlayer() {\n        return this.state.players[this.state.playerIndex];\n    }\n\n    private get myUserId() {\n        if (!this.auth) {\n            return undefined;\n        }\n        return this.auth.zid;\n    }\n\n    private get gameStateLocked() {\n        return this.state.baton && this.state.baton.userId !== this.myUserId && this.state.baton.timeout > Date.now();\n    }\n\n    private get canPass() {\n        return !this.state.over;\n    }\n\n    private get passWillEndGame() {\n        return this.state.passers.includes(this.state.playerIndex);\n    }\n\n    private get canReset() {\n        return this.state.reordered.length !== 0 || this.state.word.length !== 0;\n    }\n\n    private get gameUrl() {\n        if (this.state.gameId === undefined) {\n            return undefined;\n        }\n        return `${window.location.toString().split(\"?\").shift()}?gameId=${this.state.gameId}`;\n    }\n\n    private get pendingMove(): IPlay {\n        return {\n            type: \"play\",\n            word: this.state.word.map((tile) => ({\n                ...tile,\n                points: this.state.reordered.includes(tile) ? 0 : tile.points\n            })),\n            points: 0,\n            bonusPoints: 0,\n            goals: [],\n        };\n    }\n\n    private get tileSet() {\n        return getTileSet(this.state.options.tileSetName);\n    }\n\n    /**\n     * Turn a serialized game state into a proper runtime state:\n     *  - ensure multiple serialization of the same object are turned back into references to a single object\n     *  - restore prototypes of objects that aren't pure state\n     *\n     * NB: this mutates {state} in-place\n     */\n    private static hydrateAppState(state: IAppState) {\n        // Restore object identities lost in serialization\n        // Any place where proper {ITile}s appear, we have to make sure they all reference the same object\n        for (let i = 0; i < state.word.length; i++) {\n            state.word[i] = state.board.find((tile) => tile.id === state.word[i].id)!;\n        }\n        for (let i = 0; i < state.reordered.length; i++) {\n            state.reordered[i] = state.board.find((tile) => tile.id === state.reordered[i].id)!;\n        }\n\n        // These were only for backwards-compatibility with state saved in {sessionStorage} but it's\n        // the sort of thing we schould consider doing if we add new required fields and don't want to break\n        // in-progress games.\n        //\n        // if (state.nukers === undefined) {\n        //   state.nukers = [];\n        // }\n        // if (state.passers === undefined) {\n        //   state.passers = [];\n        // }\n        // if (state.options === undefined) {\n        //   state.options = {};\n        // }\n        // if (state.announcements === undefined) {\n        //   state.announcements = [];\n        // }\n        // if (state.gameId === undefined) {\n        //   state.gameId = uuid();\n        // }\n\n        // Goals aren't plain-old-data-objects, so hydrate them\n        state.goals = this.hydrateGoals(state.goals || []);\n    }\n\n    private static hydrateGoals(goals: IGoal[]): IGoal[] {\n        return goals.map((goal) => {\n            switch (goal.type) {\n                case \"Double Up\":\n                    return DoublesGoal.fromJson(goal);\n                case \"Cheapskate\":\n                    return CheapskateGoal.fromJson(goal);\n                case \"Get Moving\":\n                    return VerbGoal.fromJson(goal);\n                case \"Over It\":\n                    return VerbPastGoal.fromJson(goal);\n                case \"Shortie\":\n                    return LengthGoal.fromJson(goal);\n                case \"Up Front\":\n                    return StartsWithGoal.fromJson(goal);\n                default:\n                    throw new Error(`Unknown goal type: ${goal.type}`);\n            }\n        });\n    }\n\n    private automation: IAutomationAction[] = [];\n    private loadGameId?: string;\n    private forcePushGameData?: boolean;\n\n    private batonTimeout?: any;\n    private tickInterval?: any;\n    private pollInterval?: any;\n    private automateInterval?: any;\n    private pushImmediate?: any;\n\n    private auth?: IAuth;\n\n    private lastSavedState?: string;\n\n    private pendingDrops: ITile[] = [];\n    private clearDrops: ITile[] = [];\n\n    constructor(props: any) {\n        super(props);\n\n        // This is the local pass-and-play implementation, left here for reference.\n        //\n        // const stateString = sessionStorage.getItem(\"boardState\");\n        // if (stateString) {\n        //   try {\n        //     const state = JSON.parse(stateString) as IAppState;\n        //     App.hydrateAppState(state);\n        //     this.state = state;\n        //     return;\n        //   } catch {\n        //     sessionStorage.clear();\n        //   }\n        // }\n\n        this.loadGameId = sessionStorage.getItem(\"gameId\") || undefined;\n        const menuState = JSON.parse(sessionStorage.getItem(\"menuState\") || \"{}\");\n        this.state = {...newGame(), menuState};\n    }\n\n    public componentDidMount(): void {\n        this.tickInterval = setInterval(this.tick, 100);\n        const query = getQuery();\n        this.loadGameId = query.gameId;\n        this.getToken();\n    }\n\n    public componentDidUpdate(prevProps: any, prevState: any) {\n        //console.log({componentDidUpdate: explainDiff(diff.diff(prevState, this.state))});\n        if (this.myPlayer && localStorage.getItem(PLAYER_NAME_KEY) !== this.myPlayer.name) {\n            localStorage.setItem(PLAYER_NAME_KEY, this.myPlayer.name);\n        }\n        if (!this.auth) {\n            return;\n        }\n        this.ensureParticipant();\n        if (this.state.reordered.length > 0 && (this.state.board.find((e, i) => this.state.original[i] !== e) === undefined)) {\n            this.setState({reordered: [], scooched: undefined});\n        } else {\n            if (this.pushImmediate) {\n                clearTimeout(this.pushImmediate);\n            }\n            this.pushImmediate = setTimeout(this.push, 10);\n        }\n        if (this.state.baton) {\n            if (!this.batonTimeout) {\n                this.batonTimeout = setTimeout(() => this.setState((state) => {\n                    this.batonTimeout = undefined;\n                    if (state.baton && state.baton.timeout < Date.now()) {\n                        return {baton: undefined};\n                    }\n                    return {};\n                }), this.state.baton.timeout - Date.now());\n            }\n        }\n        // Ensure that all participants have the same URL in their window so reloading doesn't start a new game:\n        if (this.state.options.solo !== undefined) {\n            if (window.location.href !== this.gameUrl) {\n                if (window.history.pushState) {\n                    window.history.pushState({path: this.gameUrl}, \"\", this.gameUrl);\n                }\n            }\n        }\n        sessionStorage.setItem(\"menuState\", JSON.stringify(this.state.menuState));\n    }\n\n    public componentWillUnmount(): void {\n        if (this.batonTimeout) {\n            clearTimeout(this.batonTimeout);\n        }\n        if (this.tickInterval) {\n            clearInterval(this.tickInterval);\n        }\n        if (this.pollInterval) {\n            clearInterval(this.pollInterval);\n        }\n        if (this.automateInterval) {\n            clearInterval(this.automateInterval);\n        }\n    }\n\n    public render() {\n        if (this.myPlayer === undefined) {\n            return <Alert><Alert.Heading>Loading</Alert.Heading><p>{this.state.loading}</p></Alert>;\n        }\n        const tileSet = getTileSet(this.state.options.tileSetName);\n        // const totalTiles = tileSet.tiles.map((tile) => tile.count).reduce((a, b) => a + b);\n        // const totalPoints = tileSet.tiles.map((tile) => tile.count * tile.points).reduce((a, b) => a + b);\n        let selectableLetters = Array(...this.state.board);\n        if (this.state.word.length > 0) {\n            selectableLetters = selectableLetters.filter((tile, index) => this.canSelect(index));\n        }\n        let canPlay = false;\n        let playLabel = \"Too Short\";\n        if (this.state.word.length > 2) {\n            canPlay = isWord(this.state.word);\n            const word = this.state.word.map((tile) => tile.letter).join(\"\");\n            let points = this.state.word.map(this.tilePoints).reduce((a, b) => (a || 0) + (b || 0));\n            let bonusPoints = this.state.word.map(this.bonusPoints).reduce((a, b) => (a || 0) + (b || 0)) || 0;\n            bonusPoints = bonusPoints + this.state.goals.map((goal) => goal.check(this.pendingMove) ? goal.points : 0).reduce((a, b) => a + b, 0);\n            points = (points || 0) + bonusPoints;\n            if (canPlay) {\n                if (this.state.smeared) {\n                    playLabel = `Release to play '${word}' for ${points || \"no\"} points`;\n                } else {\n                    playLabel = `Play '${word}' for ${points || \"no\"} points`;\n                }\n            } else {\n                playLabel = `'${word}' is not a word`;\n            }\n        }\n\n        // If the player was smearing, auto-play if possible.\n        // If the player was tapping letters or scooching, though, don't do anything.\n        let onDone: ((key: string) => void) | undefined;\n        if (this.state.smeared) {\n            if (canPlay) {\n                onDone = this.onPlay;\n            } else {\n                onDone = (id) => {\n                    // TODO: this should probably be an option\n                    // deselect everything if the smear ends on a selected tile and the word's invalid,\n                    // otherwise leave state unchanged (as in the end of a scooch)\n                    const i = this.state.word.findIndex((tile) => tile.id === id);\n                    //console.log({ id, word: this.state.word, i });\n                    if (i >= 0) {\n                        this.setState({word: []});\n                    }\n                };\n            }\n        } else {\n            onDone = undefined;\n        }\n\n        const scoredPlayers = this.state.players.map((player) => {\n            const score = playerScore(player);\n            return {score, ...player};\n        }).sort((a, b) => b.score - a.score);\n        let overHeader = <Alert.Heading>{scoredPlayers[0].name} Wins!</Alert.Heading>;\n        if (scoredPlayers.find((e) => e.score !== scoredPlayers[0].score) === undefined) {\n            overHeader = <Alert.Heading>It’s a tie!</Alert.Heading>;\n        }\n\n        const yourPoints = this.state.players[0].words.map((play) => play.type === \"play\" ? play.points + play.bonusPoints : 0).reduce((a, b) => a + b, 0);\n        //const yourTiles = this.state.players[0].words.map((play) => play.type === \"play\" ? play.word.length : 0).reduce((a, b) => a + b, 0);\n        //const targetPoints = (yourTiles / totalTiles) * totalPoints;\n        const yourTargetPoints = this.state.players[0].words\n            .map((play) => play.type === \"play\" ? play.word : [])\n            .reduce((a, b) => a.concat(b), [])\n            .map((playedTile) => playedTile.letter)\n            .map((letter) => tileSet.tiles.find((e) => e.letter === letter)!.points)\n            .reduce((a, b) => a + b, 0) + this.state.players[0].words.length;\n        const stars = yourPoints - yourTargetPoints;\n        let starsString = \"\";\n        for (let i = 0; i < Math.abs(stars); ++i) {\n            starsString += \"★\";\n        }\n\n        const gameUrl = this.gameUrl;\n        return <>\n            {this.renderPlayers()}\n            <div className={phone() ? undefined : \"container-fluid\"}>\n                {this.renderModal()}\n                <Row>\n                    <Col\n                        className={compact([\"col-sm-12\", \"col-xl-6\", \"board-col\", this.state.over && \"over\"]).join(\" \")}>\n                        <Row>\n                            <div className=\"play-area\">\n                                {this.state.word.map((item, index) => (\n                                    <div key={index} className=\"tile\">\n                                        <div className=\"field\" style={{\n                                            backgroundImage: `url(${tile})`,\n                                            backgroundSize: \"contain\",\n                                            backgroundRepeat: \"no-repeat\",\n                                        }}>\n                                            <div className=\"points\">{this.tilePoints(item) || <>&nbsp;</>}</div>\n                                            <div className=\"letter\">{item.letter}</div>\n                                            {this.bonusPoints(item) &&\n                                            <div className=\"bonus\">+{this.bonusPoints(item)}</div>}\n                                        </div>\n                                    </div>\n                                ))}\n                                {/* <div style={{marginTop: \"1rem\", textAlign: \"center\", border: \"1px solid black\"}}>★★★★★</div> */}\n                                {this.state.word.length === 0 && <div className=\"tile space\"/>}\n                                <div className=\"container\">\n                                    <div className=\"flex-grow\"/>\n                                </div>\n                            </div>\n                        </Row>\n                        <Row className=\"untouchable\">\n                            {this.state.over &&\n                            <div className=\"overlay\">\n                                <Alert variant=\"success\" width=\"100%\">\n                                    {overHeader}\n                                    Final Score: {\n                                    scoredPlayers.map((player) => `${player.name}: ${player.score}`).join(\", \")\n                                }\n                                </Alert>\n                            </div>}\n                            {this.state.announcements &&\n                            <div className=\"overlay\">\n                                {this.state.announcements.map((a) =>\n                                    <div key={a.key} className=\"announcement\"\n                                         onAnimationEnd={() => this.setState((state) => ({announcements: without(state.announcements, a)}))}>\n                                        <div className=\"title\">{a.title}</div>\n                                        <div className=\"message\">{a.message}</div>\n                                    </div>)}\n                            </div>}\n                            <SlideGrid\n                                className=\"board\"\n                                canExchange={this.canScooch}\n                                tap={this.onClickItem}\n                                done={onDone}\n                                smear={this.onSmear}\n                                exchange={this.onExchange}\n                            >\n                                {\n                                    this.state.board.map((item, index) => {\n                                        const classes = [\"tile\"];\n                                        if (this.state.word.includes(item)) {\n                                            classes.push(\"selected\");\n                                        }\n                                        if (selectableLetters.indexOf(item) >= 0) {\n                                            classes.push(\"selectable\");\n                                        } else {\n                                            classes.push(\"unselectable\");\n                                        }\n                                        if (this.canScooch(item.id)) {\n                                            classes.push(\"swappable\");\n                                        } else {\n                                            classes.push(\"unswappable\");\n                                        }\n                                        if (item.type === \"space\") {\n                                            classes.push(\"space\");\n                                        }\n                                        if (this.reordered(item)) {\n                                            classes.push(\"reordered\");\n                                        }\n                                        if (this.state.options.oneScoochPerTurn && this.state.scooched === item.id) {\n                                            classes.push(\"scooched\");\n                                        }\n                                        if ((index % 4) === 0) {\n                                            classes.push(\"start-row\");\n                                        }\n                                        if (item.drop) {\n                                            classes.push(`drop-${item.drop}`);\n                                            setTimeout(() => item.drop = 0, 1000 + 1000 * item.drop);\n                                        }\n                                        const id = item.id;\n                                        return (\n                                            <div className={classes.join(\" \")} key={id} id={id}>\n                                                <div className=\"field\" style={{\n                                                    backgroundImage: `url(${tile})`,\n                                                    backgroundSize: \"contain\",\n                                                    backgroundRepeat: \"no-repeat\",\n                                                }}>\n                                                    <div className=\"points\">{this.tilePoints(item) || <>&nbsp;</>}</div>\n                                                    <div className=\"letter\">{item.letter || <>&nbsp;</>}</div>\n                                                </div>\n                                            </div>\n                                        );\n                                    })\n                                }\n                            </SlideGrid>\n                        </Row>\n                        {/*<Row className=\"board-footer\">*/}\n                        {/*    <Col sm={4} className=\"sm-right\">*/}\n                        {/*        <>*/}\n                        {/*            {gameUrl && this.state.players && this.state.players.length < 2 &&*/}\n                        {/*            <Button variant={this.state.options.solo ? \"outline-primary\" : \"primary\"}*/}\n                        {/*                    onClick={this.showInvite}>Invite a*/}\n                        {/*                Friend</Button>}*/}\n                        {/*            /!* Solo Mode: {stars > 0 && \"+\"}{stars} *!/*/}\n                        {/*            <span*/}\n                        {/*                className={`stars ${stars >= 0 ? \"positive\" : \"negative\"}`}>{starsString}</span>*/}\n                        {/*            /!* Solo Mode: {yourPoints} / {yourTargetPoints} *!/*/}\n                        {/*        </>*/}\n                        {/*    </Col>*/}\n                        {/*    <Col sm={4} className=\"sm-left\">*/}\n                        {/*        {this.state.bag.length} tiles left*/}\n                        {/*    </Col>*/}\n                        {/*</Row>*/}\n\n                        <GoalListComponent mode={\"horizontal\"} goals={this.state.goals} pendingMove={this.pendingMove}\n                                           canPlay={canPlay} board={this.state.board}/>\n                    </Col>\n                </Row>\n            </div>\n            <FooterComponent canReset={this.canReset} {...this.canNuke()} canPlay={canPlay} canPass={this.canPass}\n                             passWillEndGame={this.passWillEndGame}\n                             playLabel={playLabel}\n                             menu={this.showMenu} reset={this.onReset}\n                             nuke={this.onNuke} play={this.onPlay} pass={this.onPass}/>\n        </>;\n    }\n\n    private showInvite = () => {\n        this.changeOptions(() => ({solo: undefined}));\n    }\n\n    private getToken = () => {\n        if (this.auth) {\n            return;\n        }\n        const password = this.deviceIdentifier;\n        const userId = this.authUserId;\n        if (userId === undefined) {\n            this.setState({loading: \"register-device\"}, () =>\n                fetch(\"https://api.zynga.com/auth/registerDevice\",\n                    {\n                        method: \"POST\",\n                        body: JSON.stringify({password, appId: APP_ID}),\n                        headers: {\"Content-Type\": \"application/json\"}\n                    })\n                    .then((response) => response.json())\n                    .then((auth: IAuth) => {\n                        //console.log({registerDevice: auth});\n                        localStorage.setItem(\"DeviceIdentifier\", password);\n                        localStorage.setItem(\"AuthUserId\", auth.userId);\n                        this.getToken();\n                    })\n                    .catch(console.error));\n            return;\n        }\n        this.setState({loading: \"authenticating\"}, () =>\n            fetch(\"https://api.zynga.com/auth/issueToken\",\n                {\n                    method: \"POST\",\n                    body: JSON.stringify({password, userId, appId: APP_ID}),\n                    headers: {\"Content-Type\": \"application/json\"},\n                })\n                .then((response) => {\n                    if (response.status < 400) {\n                        return response.json();\n                    } else {\n                        console.error(response);\n                        throw new Error(response.statusText);\n                    }\n                })\n                .then((token) => {\n                    if (token) {\n                        //console.log({issueToken: token});\n                        this.auth = {\n                            password, userId, ...token,\n                        };\n                        this.onAuthenticated();\n                    } else {\n                        throw new Error(\"no json body\");\n                    }\n                })\n                .catch(console.error));\n    }\n\n    private onAuthenticated = () => {\n        this.pollInterval = setInterval(this.poll, 5000);\n        this.automateInterval = setInterval(this.automate, 1000);\n        const gameId = this.loadGameId;\n        if (gameId) {\n            this.setState({loading: \"joining-game\"}, () =>\n                this.pullGameData(gameId));\n        }\n    }\n\n    private poll = () => {\n        if (!this.auth) {\n            return;\n        }\n        const gameId = this.loadGameId || this.state.gameId;\n        if (gameId) {\n            this.setState({loading: \"loading-game\"}, () =>\n                this.pullGameData(gameId));\n        }\n    }\n\n    private pullGameData(gameId: string) {\n        if (!this.auth) {\n            return;\n        }\n        fetch(\"https://api.zynga.com/conversation/join\",\n            {\n                method: \"POST\",\n                headers: {\"Content-Type\": \"application/json\", \"Authorization\": \"token \" + this.auth.token},\n                body: JSON.stringify({\n                    accessType: \"public\",\n                    id: gameId,\n                }),\n            })\n            .then((response) => response.json())\n            .then((response) => {\n                const {baton, gameStateVersion, boardState} = response.meta;\n                this.batonTimeout = undefined;\n                if (typeof boardState === \"string\" && gameStateVersion > this.state.gameStateVersion) {\n                    console.warn(`Pulled Game State: gameStateVersion ${this.state.gameStateVersion} => ${gameStateVersion}`);\n                    const state: IAppState = JSON.parse(boardState) as IAppState;\n                    const rawState: IAppState = JSON.parse(boardState) as IAppState;\n                    App.hydrateAppState(state);\n                    //console.log(explainDiff(diff.diff(rawState, state)));\n                    this.setState({...state, baton, gameStateVersion, loading: \"ready\"} as any);\n                    return;\n                } else {\n                    this.setState({loading: \"ready\", baton}, this.ensureParticipant);\n                }\n            })\n            .catch(console.error);\n    }\n\n    private push = () => {\n        if (!this.auth) {\n            return;\n        }\n        const token = this.auth.token;\n        const updateProhibited = this.gameStateLocked;\n        const newBaton = {\n            userId: this.myUserId!,\n            timeout: Date.now() + 1000,\n        };\n        const boardStateSource = this.stateToJson(this.state);\n        const boardState = JSON.stringify(boardStateSource);\n        let needsPush = false;\n        if (this.lastSavedState) {\n            const stateDiff = diff.diff(JSON.parse(this.lastSavedState), JSON.parse(boardState));\n            //console.log({pushDiff: explainDiff(stateDiff)});\n            needsPush = !!stateDiff;\n        } else {\n            needsPush = true;\n        }\n        if (needsPush) {\n            //console.log(\"push!\");\n            if (!updateProhibited) {\n                this.forcePushGameData = false;\n                this.lastSavedState = boardState;\n                const {gameId} = this.state;\n                const gameStateVersion = this.state.gameStateVersion + 1;\n                fetch(\"https://api.zynga.com/conversation/join\",\n                    {\n                        method: \"POST\",\n                        headers: {\"Content-Type\": \"application/json\", \"Authorization\": \"token \" + token},\n                        body: JSON.stringify({\n                            accessType: \"public\",\n                            id: gameId,\n                        }),\n                    })\n                    .then((response) => response.json())\n                    .then((response) => {\n                        //console.log({join: response});\n                        sessionStorage.setItem(\"gameId\", response.id);\n                        // TODO: check our gameStateVersion against the one in the current meta to make sure we're not rewinding time.\n                        return fetch(\"https://api.zynga.com/conversation/editConversationMeta\",\n                            {\n                                method: \"POST\",\n                                headers: {\"Content-Type\": \"application/json\", \"Authorization\": \"token \" + token},\n                                body: JSON.stringify({\n                                    accessType: \"public\",\n                                    id: gameId,\n                                    meta: {baton: newBaton, gameStateVersion, boardState},\n                                }),\n                            });\n                    })\n                    .then((response) => response.json())\n                    .then((response) => {\n                        //console.log({update: response});\n                        this.batonTimeout = undefined;\n                        this.setState({baton: newBaton, gameStateVersion});\n                    })\n                    .catch(console.error);\n            } else {\n                console.warn({\n                    stateChangesWhileNotMyTurn: {\n                        ...this.state,\n                        loading: \"saved\", baton: undefined,\n                        auth: undefined, gameStateVersion: undefined,\n                    }, lastSavedState: this.lastSavedState && JSON.parse(this.lastSavedState),\n                });\n            }\n        }\n    }\n\n    private stateToJson(baseState: IAppState) {\n        return omit(baseState, \"loading\", \"menuState\", \"baton\", \"auth\", \"gameStateVersion\");\n    }\n\n    private ensureParticipant() {\n        const myPlayer = this.myPlayer;\n        if (myPlayer === undefined) {\n            const players = this.state.players;\n            const unassignedPlayer = players.find((e) => e.userId === undefined);\n            if (unassignedPlayer) {\n                unassignedPlayer.userId = this.myUserId;\n            } else {\n                players.push({name: localStorage.getItem(PLAYER_NAME_KEY) || DEFAULT_PLAYER_NAME, words: []});\n                this.forcePushGameData = true;\n            }\n            this.setState({players});\n        }\n    }\n\n    private renderPlayers() {\n        let {players} = this.state;\n        if (players.length === 1) {\n            players = [...players, {\n                name: \"INVITE\",\n                words: [],\n            }];\n        }\n        return <Row className={\"players\"}>\n            <Col xs={12} className=\"header-turn-indicator\">\n                <Col className=\"flex-grow\"/>\n                <Col xs={\"auto\"}>\n                    {this.itIsMyTurn ? \"Your Turn\" : `${this.currentPlayer.name}’s Turn`}\n                </Col>\n                <Col className=\"flex-grow\"/>\n            </Col>\n            {players.map((player, index) => {\n                const leftSide = index < players.length / 2;\n                const image = player.name !== \"INVITE\" && <div className=\"flex-shrink\">\n                    <Image src={zynga} roundedCircle={true}/>\n                </div>;\n                const isMe = player === this.myPlayer;\n                const name = isMe ? \"You\" : player.name;\n                let lastWord: JSX.Element | string | undefined;\n                if (player.words.length > 0) {\n                    const move = player.words[player.words.length - 1];\n                    switch (move.type) {\n                        case \"play\":\n                            const word = move.word.map((t) => t.letter).join(\"\");\n                            const points = (move.points || 0) + (move.bonusPoints || 0);\n                            const pointsWord = points === 0 ? \"no points\" : points === 1 ? \"one point\" : `${points} points`;\n                            lastWord = <>played <b>{word}</b> for {pointsWord}</>;\n                            break;\n                        case \"nuke\":\n                            lastWord = \"nuked\";\n                            break;\n                        case \"pass\":\n                            lastWord = \"passed\";\n                            break;\n                    }\n                } else {\n                    lastWord = undefined;\n                }\n                const nameAndScore = <Col className=\"flex-grow\">\n                    <Row className=\"name\"><Col>{\n                        player.name !== \"INVITE\"\n                            ? name\n                            : <Button className={this.state.options.solo ? \"btn-solid-outline\" : undefined}\n                                      variant={this.state.options.solo ? \"outline-primary\" : \"primary\"}\n                                      onClick={this.showInvite}>\n                                Invite a Friend\n                            </Button>}</Col></Row>\n                    <Row className=\"score\"><Col>{player.name !== \"INVITE\" && playerScore(player)}</Col></Row>\n                    {lastWord && !isMe && this.currentPlayer !== player && <Row className=\"last-word\"><Col>{lastWord}</Col></Row>}\n                </Col>;\n                return <Col key={index} xs={12 / players.length} className={`player ${leftSide ? \"left\" : \"right\"}`}>\n                    <Row>\n                        {leftSide && image}\n                        {nameAndScore}\n                        {!leftSide && image}\n                    </Row>\n                </Col>;\n            })}\n        </Row>;\n    }\n\n    private renderModal() {\n        const {menuState, options, players} = this.state;\n        const {gameUrl, myPlayer} = this;\n        const qrDialog = players && players.length < 2 && options.solo === undefined;\n        if (qrDialog && gameUrl && myPlayer) {\n            return this.renderQrDialog(gameUrl, myPlayer);\n        }\n        //console.log({menuState});\n        const mainMenu = menuState.open;\n        if (mainMenu) {\n            return this.renderMainMenu();\n        }\n        return false;\n    }\n\n    private renderQrDialog(gameUrl: string, player: IPlayer) {\n        return <InviteComponent\n            gameUrl={gameUrl} playerName={player.name}\n            changePlayerName={(value) => {\n                player.name = value;\n                this.setState((state) => {\n                    const players = Array(...state.players);\n                    return {players};\n                });\n            }}\n            dismiss={() => this.changeOptions(() => ({solo: true}))}\n            play={() => this.changeOptions(() => ({solo: false}))}\n        />;\n    }\n\n    private renderMainMenu() {\n        const passWillResign = this.passWillEndGame;\n\n        return <MainMenuComponent\n            show={!!this.state.menuState.open} hide={this.hideMenu}\n\n            canPass={this.canPass}\n            passWillEndGame={passWillResign}\n            pass={this.onPass}\n\n            canReset={this.canReset}\n            reset={this.onReset}\n\n            {...this.canNuke()}\n            nuke={this.onNuke}\n        />;\n    }\n\n    private onExchange = (a: string, b: string) => {\n        this.setState((state) => {\n            const aIndex = state.board.findIndex((e) => e.id === a);\n            const bIndex = state.board.findIndex((e) => e.id === b);\n            const board: ITile[] = [];\n            const reordered: ITile[] = Array(...state.reordered);\n            state.board.forEach((tile, index) => {\n                let newIndex = index;\n                if (index === aIndex) {\n                    newIndex = bIndex;\n                } else if (index === bIndex) {\n                    newIndex = aIndex;\n                }\n                if (newIndex !== index && !reordered.includes(tile)) {\n                    reordered.push(tile);\n                }\n                board[newIndex] = tile;\n            });\n            return {board, reordered, scooched: a};\n        });\n    }\n\n    private canNuke() {\n        const usedNuke = this.state.nukers.includes(this.state.playerIndex);\n        const noMoreTiles = this.state.bag.length === 0;\n        const canNuke = !usedNuke && !noMoreTiles;\n        return {usedNuke, noMoreTiles, canNuke};\n    }\n\n    private changeOptions = (change: (options: IScoochOptions) => IScoochOptions) => {\n        this.setState((state) => ({options: change(state.options)}));\n    }\n\n    private resetOptions = () => {\n        this.setState({options: DEFAULT_OPTIONS});\n    }\n\n    private canSelect = (index: number) => {\n        if (this.state.word.length === 0) {\n            return true;\n        }\n        const seedTile = this.state.word[this.state.word.length - 1];\n        const seed = this.state.board.findIndex((tile) => tile === seedTile);\n        const indexRow = Math.floor(index / 4);\n        const seedRow = Math.floor(seed / 4);\n        if (indexRow === seedRow) {\n            return Math.abs(index - seed) === 1;\n        } else {\n            if (Math.abs(indexRow - seedRow) === 1) {\n                return Math.abs(index % 4 - seed % 4) <= 1;\n            }\n            return false;\n        }\n    }\n\n    private getTile(key: string) {\n        return this.state.board.find((e) => e.id === key); // || this.state.bag.find((e) => e.id === key);\n    }\n\n    private getIndex(key: string) {\n        return this.state.board.findIndex((e) => e.id === key); // || this.state.bag.find((e) => e.id === key);\n    }\n\n    private canScooch = (keyA: string, keyB?: string) => {\n        if (this.state.options.oneScoochPerTurn && this.state.scooched && ![keyA, keyB].includes(this.state.scooched)) {\n            return false;\n        }\n        const a = this.getIndex(keyA);\n        if (a < 0 || this.state.word.indexOf(this.state.board[a]) >= 0) {\n            return false;\n        }\n        if (this.state.board[a].type !== \"letter\") {\n            return false;\n        }\n        if (!keyB) {\n            return true;\n        }\n        const b = this.getIndex(keyB);\n        if (b < 0 || this.state.word.indexOf(this.state.board[b]) >= 0) {\n            return false;\n        }\n        if (this.state.board[b].type !== \"letter\") {\n            return false;\n        }\n        const indexRow = Math.floor(b / 4);\n        const seedRow = Math.floor(a / 4);\n        if (indexRow === seedRow) {\n            return Math.abs(b - a) === 1;\n        } else {\n            if (Math.abs(indexRow - seedRow) === 1) {\n                return b % 4 === a % 4;\n            }\n            return false;\n        }\n    }\n\n    private tick = () => {\n        if (this.myPlayer === undefined) {\n            return;\n        }\n        for (let i = this.state.board.length - 1; i >= 0; i--) {\n            const space = this.state.board[i];\n            if (space.type === \"drop\") {\n                this.setState((state) => {\n                    const board = Array(...state.board);\n                    const bag = Array(...state.bag);\n                    i = board.indexOf(space);\n                    if (i >= 0) {\n                        if (state.bag.length > 0) {\n                            const j = Math.floor(Math.random() * state.bag.length);\n                            board[i] = bag.splice(j, 1)[0];\n                            this.drop(board[i], space.drop);\n                        } else {\n                            board[i].type = \"space\";\n                        }\n                    }\n                    return {bag, board, original: Array(...board)};\n                });\n                break;\n            }\n        }\n        if (this.pendingDrops.length === 0 && this.clearDrops.length > 0) {\n            while (this.clearDrops.length > 0) {\n                this.clearDrops.pop()!.drop = 0;\n            }\n            console.warn(\"tickForceUpdate\");\n            this.forceUpdate();\n            return;\n        }\n    }\n\n    private automate = () => {\n        if (this.myPlayer === undefined) {\n            return;\n        }\n        const {goals} = this.state;\n        if (goals.length < 3) {\n            const availableLetters = compact([...this.state.bag.map((e) => e.letter), ...this.state.board.map((e) => e.letter)]);\n            switch (Math.floor(Math.random() * 6)) {\n                case 0:\n                    goals.push(new CheapskateGoal());\n                    break;\n                case 1:\n                    goals.push(new VerbGoal());\n                    break;\n                case 2:\n                    goals.push(new VerbPastGoal());\n                    break;\n                case 3:\n                    goals.push(new DoublesGoal(sample(\"RSTLNE\")!));\n                    break;\n                case 4:\n                    if (availableLetters.length > 0) {\n                        goals.push(new StartsWithGoal(sample(availableLetters)!));\n                    }\n                    break;\n                case 5:\n                    goals.push(new LengthGoal(sample([3, 4])!));\n                    break;\n            }\n            this.setState({goals: uniqBy(goals, JSON.stringify)});\n            return;\n        }\n\n        const automation = this.automation.shift();\n        if (automation) {\n            switch (automation.type) {\n                case \"tap\":\n                    this.onClickItem(automation.a, false);\n                    return;\n                case \"wait\":\n                    return;\n                case \"nuke\":\n                    this.onNuke();\n                    return;\n                case \"pass\":\n                    this.onPass();\n                    return;\n                case \"submit\":\n                    this.onPlay();\n                    return;\n                default:\n                    console.error({automation});\n                    return;\n            }\n        }\n\n        const {board, players, playerIndex} = this.state;\n        const {canNuke} = this.canNuke();\n        const currentPlayer = players[playerIndex];\n        if (currentPlayer.automated) {\n            if (!board.some((t) => t.type === \"drop\")) {\n                const possibilities: Array<[number, ITile[]]> = [];\n                new WordFinder(board, 4, (word) => {\n                    if (word.length >= 3) {\n                        const points: number = word.map((e) => e.points).reduce((a, b) => a + b, 0);\n                        possibilities.push([points, word]);\n                    }\n                }).findWords();\n                possibilities.sort((a, b) => a[0] - b[0]);\n                const play = possibilities.pop();\n                //console.log({possibilities});\n                if (play !== undefined) {\n                    this.automation = play[1].map((e) => ({\n                        type: \"tap\",\n                        a: e.id,\n                    }));\n                    this.automation.push({type: \"wait\"});\n                    this.automation.push({type: \"submit\"});\n                } else if (canNuke) {\n                    this.automation.push({type: \"nuke\"});\n                } else {\n                    this.automation.push({type: \"pass\"});\n                }\n            }\n        }\n    }\n\n    private reordered = (tile: ITile) => {\n        return this.state.reordered.includes(tile);\n    }\n\n    private tilePoints = (tile: ITile): number | undefined => {\n        if (this.reordered(tile)) {\n            return undefined;\n        }\n        return tile.points;\n    }\n\n    private bonusPoints = (tile: ITile): number | undefined => {\n        if (!this.state.options.bonusForLongerWords) {\n            return undefined;\n        }\n        const index = this.state.word.indexOf(tile);\n        if (this.state.options.bonusForLongerWords === \"constant\") {\n            if (index < 4) {\n                return undefined;\n            }\n            return 1;\n        }\n        if (index < 3) {\n            return undefined;\n        }\n        return index - 2;\n    }\n\n    private tileSelected = (tile: ITile, word?: ITile[]) => {\n        if (word === undefined) {\n            word = this.state.word;\n        }\n        return word.includes(tile);\n    }\n\n    private onSmear = (key: string) => {\n        const id = key;\n        const tile = this.state.board.find((tile) => tile.id.toString() === id);\n        if (tile) {\n            const index = this.state.board.indexOf(tile);\n            if (!this.tileSelected(tile)) {\n                if (this.canSelect(index)) {\n                    this.onClickItem(key, true);\n                }\n            } else {\n                const preserveIndex = this.state.word.indexOf(tile);\n                const tileToDeselect = this.state.word[preserveIndex + 1];\n                if (tileToDeselect) {\n                    this.onClickItem(tileToDeselect.id, true);\n                }\n            }\n        }\n    }\n\n    private onClickItem = (key: string, smeared: boolean = false) => {\n        const id = key;\n        const tile = this.state.board.find((tile) => tile.id.toString() === id);\n        if (tile) {\n            const index = this.state.board.indexOf(tile);\n            if (this.tileSelected(tile) || this.canSelect(index)) {\n                this.setState((state) => {\n                    const word = Array(...state.word);\n                    if (this.tileSelected(tile, word)) {\n                        while (this.tileSelected(tile, word)) {\n                            word.pop();\n                        }\n                    } else {\n                        word.push(tile);\n                    }\n                    return {word, smeared};\n                });\n            }\n        }\n    }\n\n    private showMenu = () => {\n        this.setState((state) => ({menuState: {...state.menuState, open: true}}));\n    }\n\n    private hideMenu = () => {\n        this.setState((state) => ({menuState: {...state.menuState, open: false}}));\n    }\n\n    private onReset = () => {\n        this.setState((state) => {\n            return {word: [], board: state.original, reordered: [], scooched: undefined};\n        });\n    }\n\n    private onNuke = () => {\n        this.setState((state) => {\n            const board: ITile[] = [];\n            for (let j = 0; j < 16; j++) {\n                board.push({\n                    type: \"drop\",\n                    id: `blank-${j}`,\n                } as ITile);\n            }\n            const bag: ITile[] = Array(...state.bag);\n            state.board.forEach((tile) => {\n                if (tile.type === \"letter\") {\n                    bag.push(tile);\n                }\n            });\n            const playerIndex = state.playerIndex;\n            const nukers = Array(...state.nukers);\n            nukers.push(playerIndex);\n            const players = Array(...state.players);\n            players[playerIndex].words.push({type: \"nuke\"});\n            return {nukers, bag, board, scooched: undefined};\n        });\n    }\n\n    private onPass = () => {\n        this.setState((state) => {\n            let playerIndex = state.playerIndex;\n            const passers = Array(...state.passers);\n            if (passers.includes(playerIndex)) {\n                return {...state, word: [], board: state.original, reordered: [], over: true};\n            } else {\n                passers.push(playerIndex);\n                const players = Array(...state.players);\n                players[playerIndex].words.push({type: \"pass\"});\n                playerIndex = (playerIndex + 1) % state.players.length;\n                return {\n                    ...state,\n                    word: [],\n                    board: state.original,\n                    reordered: [],\n                    playerIndex,\n                    passers,\n                    scooched: undefined\n                };\n            }\n        });\n    }\n\n    private onPlay = () => {\n        this.setState((state) => {\n            const board = Array(...state.board);\n            const word = Array(...state.word);\n            const playedWord: IPlayedTile[] = [];\n            let points = 0;\n            let bonusPoints = 0;\n            while (word.length > 0) {\n                const tile = word.pop()!;\n                const letter = tile.letter;\n                const tilePoints = this.tilePoints(tile);\n                const tileBonusPoints = this.bonusPoints(tile);\n                playedWord.unshift({id: tile.id, letter, points: tilePoints, bonusPoints: tileBonusPoints});\n                points += (tilePoints || 0);\n                bonusPoints += (tileBonusPoints || 0);\n                let seed = board.indexOf(tile);\n                const drops: ITile[] = [];\n                while (seed >= 0) {\n                    const drop = seed - 4;\n                    if (drop >= 0) {\n                        board[seed] = board[drop];\n                        board[seed].drop++;\n                    } else {\n                        board[seed] = {type: \"drop\", id: `dropping-${tile.id}`, drop: board[seed].drop + 1} as ITile;\n                    }\n                    drops.push(board[seed]);\n                    seed = drop;\n                }\n                drops.forEach((tile) => this.drop(tile, tile.drop));\n            }\n            const players = Array(...state.players);\n            const player = players[state.playerIndex];\n            const playMove: IPlay = {\n                type: \"play\",\n                word: playedWord,\n                points,\n                bonusPoints,\n                goals: [],\n            };\n            player.words.push(playMove);\n            this.state.goals.forEach((goal) => {\n                if (goal.check(playMove)) {\n                    this.announceGoal(goal);\n                    playMove.goals.push(goal);\n                    playMove.bonusPoints += goal.points;\n                }\n            });\n            const goals = without(this.state.goals, ...playMove.goals);\n            const playerIndex = (state.playerIndex + 1) % players.length;\n            return {\n                board,\n                word,\n                players,\n                playerIndex,\n                original: Array(...board),\n                reordered: [],\n                passers: [],\n                scooched: undefined,\n                goals\n            };\n        });\n    }\n\n    private announceGoal(goal: IGoal) {\n        this.announce(`${goal.type} +${goal.points}`, goal.description);\n    }\n\n    private drop(tile: ITile, distance: number) {\n        this.pendingDrops.push(tile);\n        tile.drop = distance;\n        setTimeout(() => {\n            const i = this.pendingDrops.indexOf(tile);\n            this.pendingDrops.splice(i, 1);\n            this.clearDrops.push(tile);\n        }, tile.drop * 1000);\n    }\n\n    private announce(title: string, message: string) {\n        this.setState((state) => {\n            const {announcements} = state;\n            announcements.push({title, message, key: ++UID});\n            return {announcements};\n        });\n    }\n}\n\nexport default App;\n","import Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport * as React from \"react\";\nimport Figure from \"react-bootstrap/Figure\";\nimport Badge from \"react-bootstrap/Badge\";\nimport compact from \"lodash/compact\";\n\ninterface IMenuItemProps {\n    icon: string;\n    title: string;\n    description: string;\n    disabled?: boolean;\n    badge?: string | number;\n    onClick(): void;\n    onClickDisabled?(): void;\n}\n\nexport default class MenuItemComponent extends React.Component<IMenuItemProps> {\n    render() {\n        const {icon, badge, title, description, disabled, onClick, onClickDisabled} = this.props;\n        return <Row className={compact([\"menu-item\", disabled && \"disabled\"]).join(\" \")} onClick={disabled ? onClickDisabled : onClick}>\n            <Col xs={2} className=\"left\">\n                <Figure>\n                    <Figure.Image src={icon}/>\n                </Figure>\n            </Col>\n            <Col className={\"right flex-grow\"}>\n                <Row>\n                    <Col className={\"title flex-grow\"}>\n                        {title}\n                    </Col>\n                    <Col xs={\"auto\"}>\n                        {badge && <Badge variant={\"success\"} pill={true}>{badge}</Badge>}\n                    </Col>\n                </Row>\n                <Row className={\"description\"}>\n                    <Col className={\"flex-fill\"}>\n                        <span>\n                            {description}\n                        </span>\n                    </Col>\n                </Row>\n            </Col>\n        </Row>;\n    }\n}\n","import Modal from \"react-bootstrap/Modal\";\nimport \"Menus.css\";\nimport MenuItemComponent from \"./MenuItemComponent\";\nimport * as React from \"react\";\nimport tile from \"tile.svg\";\n\ninterface IMainMenuProps {\n    show: boolean;\n    hide(): void;\n\n    help?(section: \"how-to\"): void;\n\n    canReset: boolean;\n    reset(): void;\n\n    usedNuke: boolean;\n    noMoreTiles: boolean;\n    nuke(): void;\n\n    canPass: boolean;\n    passWillEndGame: boolean;\n    pass(): void;\n}\n\nexport default class MainMenuComponent extends React.Component<IMainMenuProps> {\n    public render() {\n        const {show, hide,\n\n            canReset, reset,\n            canPass, passWillEndGame, pass,\n\n            usedNuke, noMoreTiles, nuke} = this.props;\n\n        let nukeTitle = \"Discard all tiles and draw new ones. You may only do this once per game.\";\n        if (usedNuke) {\n            nukeTitle = \"You may only use the nuclear option once per game.\";\n        } else if (noMoreTiles) {\n            nukeTitle = \"It’s too late to use the nuclear option.\";\n        }\n\n        return <Modal className=\"main-menu\" show={show} onHide={hide} backdrop={true}>\n            <Modal.Body>\n                <MenuItemComponent\n                    title={\"How to Play\"}\n                    description={\"Getting started and rules of the game\"}\n                    icon={tile}\n                    disabled={true}\n                    onClick={() => {throw new Error(\"Not Implemented\")}}\n                />\n\n                <MenuItemComponent\n                    title={\"Dictionary\"}\n                    description={\"Information about which words are acceptable\"}\n                    icon={tile}\n                    disabled={true}\n                    onClick={() => {throw new Error(\"Not Implemented\")}}\n                />\n\n                <MenuItemComponent\n                    title={\"Tile Distribution\"}\n                    description={\"How many tiles there are of each letter and how many remain in the bag\"}\n                    icon={tile}\n                    disabled={true}\n                    onClick={() => {throw new Error(\"Not Implemented\")}}\n                />\n\n                <MenuItemComponent\n                    title={\"Reset\"}\n                    description={\"Return tiles to their original positions, restoring their point values.\"}\n                    icon={tile}\n                    disabled={!canReset}\n                    onClick={reset}\n                />\n\n                <MenuItemComponent\n                    title={passWillEndGame ? \"Pass\" : \"Finish\"}\n                    description={passWillEndGame ? \"Finish the game\" : \"No moves? Pass your turn\"}\n                    icon={tile}\n                    disabled={!canPass}\n                    onClick={pass}\n                />\n\n                <MenuItemComponent\n                    title={\"Nuke\"}\n                    description={nukeTitle}\n                    icon={tile}\n                    badge={usedNuke ? 0 : 1}\n                    disabled={usedNuke}\n                    onClick={nuke}\n                />\n\n                <MenuItemComponent\n                    title={\"Resign\"}\n                    description={\"End this game, but it counts as a loss\"}\n                    icon={tile}\n                    disabled={true}\n                    onClick={() => {throw new Error(\"Not Implemented\")}}\n                />\n            </Modal.Body>\n        </Modal>;\n    }\n}\n","import {observable} from \"mobx\";\n\nexport interface ITileDefinition {\n  letter: string;\n  count: number;\n  points: number;\n}\n\nexport class TileDefinition implements ITileDefinition {\n  @observable\n  public letter: string;\n\n  @observable\n  public count: number;\n\n  @observable\n  public points: number;\n\n  constructor(props: ITileDefinition) {\n    this.letter = props.letter;\n    this.count = props.count;\n    this.points = props.points;\n  }\n}\n\nexport interface ITileSet {\n  name: string;\n  tiles: ITileDefinition[];\n}\n\nexport class TileSet implements ITileSet {\n  @observable\n  public name: string;\n  \n  @observable\n  public tiles: ITileDefinition[];\n\n  constructor(name?: string, tiles?: ITileDefinition[]) {\n    this.name = name || \"Untitled\";\n    this.tiles = tiles || [];\n  }\n}\n\nconst DefaultTileDefinitions = [\n{\n    letter: \"A\",\n    count: 9,\n    points: 1,\n  },\n  {\n    letter: \"B\",\n    count: 2,\n    points: 4,\n  },\n  {\n    letter: \"C\",\n    count: 2,\n    points: 4,\n  },\n  {\n    letter: \"D\",\n    count: 5,\n    points: 2,\n  },\n  {\n    letter: \"E\",\n    count: 13,\n    points: 1,\n  },\n  {\n    letter: \"F\",\n    count: 2,\n    points: 4,\n  },\n  {\n    letter: \"G\",\n    count: 3,\n    points: 3,\n  },\n  {\n    letter: \"H\",\n    count: 4,\n    points: 3,\n  },\n  {\n    letter: \"I\",\n    count: 6,\n    points: 1,\n  },\n  {\n    letter: \"J\",\n    count: 1,\n    points: 10,\n  },\n  {\n    letter: \"K\",\n    count: 1,\n    points: 5,\n  },\n  {\n    letter: \"L\",\n    count: 4,\n    points: 2,\n  },\n  {\n    letter: \"M\",\n    count: 2,\n    points: 4,\n  },\n  {\n    letter: \"N\",\n    count: 5,\n    points: 2,\n  },\n  {\n    letter: \"O\",\n    count: 8,\n    points: 1,\n  },\n  {\n    letter: \"P\",\n    count: 2,\n    points: 4,\n  },\n  {\n    letter: \"Q\",\n    count: 1,\n    points: 10,\n  },\n  {\n    letter: \"R\",\n    count: 6,\n    points: 1,\n  },\n  {\n    letter: \"S\",\n    count: 5,\n    points: 1,\n  },\n  {\n    letter: \"T\",\n    count: 7,\n    points: 1,\n  },\n  {\n    letter: \"U\",\n    count: 4,\n    points: 2,\n  },\n  {\n    letter: \"V\",\n    count: 2,\n    points: 5,\n  },\n  {\n    letter: \"W\",\n    count: 2,\n    points: 4,\n  },\n  {\n    letter: \"X\",\n    count: 1,\n    points: 8,\n  },\n  {\n    letter: \"Y\",\n    count: 2,\n    points: 3,\n  },\n  {\n    letter: \"Z\",\n    count: 1,\n    points: 10,\n  },\n].map((e) => new TileDefinition(e));\n\nconst DefaultTileSet: ITileSet = new TileSet(\"Default\",  DefaultTileDefinitions)\n\nexport default [DefaultTileSet];\n","import { ITile } from 'App';\nimport { getPrefixInfo } from './isWord';\n\nexport default class WordFinder {\n    private board: ITile[];\n    private width: number;\n    private onWordFound: (word: ITile[]) => void;\n\n    constructor(board: ITile[], width: number, onWordFound: (word: ITile[]) => void) {\n        this.board = board;\n        this.width = width;\n        this.onWordFound = onWordFound;\n    }\n\n    public findWords() {\n        for (let y = 0; y < this.board.length / this.width; y++) {\n            for (let x = 0; x < this.width; x++) {\n                const seed = this.width * y + x;\n                this.search(seed, []);\n            }            \n        }\n    }\n\n    private adjacent(pos: number) {\n        const {board, width} = this;\n        const x = pos % width;\n        const y = (pos - x) / width;\n        const result: number[] = [];\n        if (x > 0) {\n            result.push(pos - 1);\n            if (y > 0) {\n                result.push(pos - 1 - width);\n            }\n            if (y < (board.length / width) - 1) {\n                result.push(pos - 1 + width);\n            }\n        }\n        if (y > 0) {\n            result.push(pos - width);\n        }\n        if (x < width - 1) {\n            result.push(pos + 1);\n            if (y > 0) {\n                result.push(pos + 1 - width);\n            }\n            if (y < (board.length / width) - 1) {\n                result.push(pos + 1 + width);\n            }\n        }\n        if (y < (board.length / width) - 1) {\n            result.push(pos + width);\n        }\n        return result;\n    }\n\n    private adjacentFree(pos: number, word: ITile[]) {\n        return this.adjacent(pos).filter((e) => {\n            const tile = this.board[e];\n            if (tile.type !== \"letter\") {\n                return false;\n            }\n            if (word.includes(tile)) {\n                return false;\n            }\n            return true;\n        });\n    }\n\n    private search(pos: number, word: ITile[]) {\n        const tile = this.board[pos];\n        if (tile.type !== \"letter\") {\n            return;\n        }\n        word.push(tile);\n        const info = getPrefixInfo(word);\n        if (info === undefined) {\n            return;\n        }\n        if (info === true || info.valid) {\n            this.onWordFound(word);\n        }\n        if (info !== true) {\n            const af = this.adjacentFree(pos, word);\n            af.forEach((nextPos) => {\n                const nextTile = this.board[nextPos];\n                if (info.next.includes(nextTile.letter.toLowerCase())) {\n                    this.search(nextPos, [...word]);\n                }\n            });\n        }\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './dialogs.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}